// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testpb/signers.proto

package testpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SimpleSigner struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *SimpleSigner) Reset()         { *m = SimpleSigner{} }
func (m *SimpleSigner) String() string { return proto.CompactTextString(m) }
func (*SimpleSigner) ProtoMessage()    {}
func (*SimpleSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{0}
}
func (m *SimpleSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSigner.Merge(m, src)
}
func (m *SimpleSigner) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSigner.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSigner proto.InternalMessageInfo

func (m *SimpleSigner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type RepeatedSigner struct {
	Signer []string `protobuf:"bytes,1,rep,name=signer,proto3" json:"signer,omitempty"`
}

func (m *RepeatedSigner) Reset()         { *m = RepeatedSigner{} }
func (m *RepeatedSigner) String() string { return proto.CompactTextString(m) }
func (*RepeatedSigner) ProtoMessage()    {}
func (*RepeatedSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{1}
}
func (m *RepeatedSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepeatedSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepeatedSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedSigner.Merge(m, src)
}
func (m *RepeatedSigner) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedSigner.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedSigner proto.InternalMessageInfo

func (m *RepeatedSigner) GetSigner() []string {
	if m != nil {
		return m.Signer
	}
	return nil
}

type NestedSigner struct {
	Inner *NestedSigner_Inner `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *NestedSigner) Reset()         { *m = NestedSigner{} }
func (m *NestedSigner) String() string { return proto.CompactTextString(m) }
func (*NestedSigner) ProtoMessage()    {}
func (*NestedSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{2}
}
func (m *NestedSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedSigner.Merge(m, src)
}
func (m *NestedSigner) XXX_Size() int {
	return m.Size()
}
func (m *NestedSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedSigner.DiscardUnknown(m)
}

var xxx_messageInfo_NestedSigner proto.InternalMessageInfo

func (m *NestedSigner) GetInner() *NestedSigner_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

type NestedSigner_Inner struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *NestedSigner_Inner) Reset()         { *m = NestedSigner_Inner{} }
func (m *NestedSigner_Inner) String() string { return proto.CompactTextString(m) }
func (*NestedSigner_Inner) ProtoMessage()    {}
func (*NestedSigner_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{2, 0}
}
func (m *NestedSigner_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedSigner_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedSigner_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedSigner_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedSigner_Inner.Merge(m, src)
}
func (m *NestedSigner_Inner) XXX_Size() int {
	return m.Size()
}
func (m *NestedSigner_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedSigner_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_NestedSigner_Inner proto.InternalMessageInfo

func (m *NestedSigner_Inner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type RepeatedNestedSigner struct {
	Inner []*RepeatedNestedSigner_Inner `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (m *RepeatedNestedSigner) Reset()         { *m = RepeatedNestedSigner{} }
func (m *RepeatedNestedSigner) String() string { return proto.CompactTextString(m) }
func (*RepeatedNestedSigner) ProtoMessage()    {}
func (*RepeatedNestedSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{3}
}
func (m *RepeatedNestedSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedNestedSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepeatedNestedSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepeatedNestedSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedNestedSigner.Merge(m, src)
}
func (m *RepeatedNestedSigner) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedNestedSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedNestedSigner.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedNestedSigner proto.InternalMessageInfo

func (m *RepeatedNestedSigner) GetInner() []*RepeatedNestedSigner_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

type RepeatedNestedSigner_Inner struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *RepeatedNestedSigner_Inner) Reset()         { *m = RepeatedNestedSigner_Inner{} }
func (m *RepeatedNestedSigner_Inner) String() string { return proto.CompactTextString(m) }
func (*RepeatedNestedSigner_Inner) ProtoMessage()    {}
func (*RepeatedNestedSigner_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{3, 0}
}
func (m *RepeatedNestedSigner_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedNestedSigner_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepeatedNestedSigner_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepeatedNestedSigner_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedNestedSigner_Inner.Merge(m, src)
}
func (m *RepeatedNestedSigner_Inner) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedNestedSigner_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedNestedSigner_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedNestedSigner_Inner proto.InternalMessageInfo

func (m *RepeatedNestedSigner_Inner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type NestedRepeatedSigner struct {
	Inner *NestedRepeatedSigner_Inner `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *NestedRepeatedSigner) Reset()         { *m = NestedRepeatedSigner{} }
func (m *NestedRepeatedSigner) String() string { return proto.CompactTextString(m) }
func (*NestedRepeatedSigner) ProtoMessage()    {}
func (*NestedRepeatedSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{4}
}
func (m *NestedRepeatedSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedRepeatedSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedRepeatedSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedRepeatedSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedRepeatedSigner.Merge(m, src)
}
func (m *NestedRepeatedSigner) XXX_Size() int {
	return m.Size()
}
func (m *NestedRepeatedSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedRepeatedSigner.DiscardUnknown(m)
}

var xxx_messageInfo_NestedRepeatedSigner proto.InternalMessageInfo

func (m *NestedRepeatedSigner) GetInner() *NestedRepeatedSigner_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

type NestedRepeatedSigner_Inner struct {
	Signer []string `protobuf:"bytes,1,rep,name=signer,proto3" json:"signer,omitempty"`
}

func (m *NestedRepeatedSigner_Inner) Reset()         { *m = NestedRepeatedSigner_Inner{} }
func (m *NestedRepeatedSigner_Inner) String() string { return proto.CompactTextString(m) }
func (*NestedRepeatedSigner_Inner) ProtoMessage()    {}
func (*NestedRepeatedSigner_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{4, 0}
}
func (m *NestedRepeatedSigner_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedRepeatedSigner_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedRepeatedSigner_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedRepeatedSigner_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedRepeatedSigner_Inner.Merge(m, src)
}
func (m *NestedRepeatedSigner_Inner) XXX_Size() int {
	return m.Size()
}
func (m *NestedRepeatedSigner_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedRepeatedSigner_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_NestedRepeatedSigner_Inner proto.InternalMessageInfo

func (m *NestedRepeatedSigner_Inner) GetSigner() []string {
	if m != nil {
		return m.Signer
	}
	return nil
}

type RepeatedNestedRepeatedSigner struct {
	Inner []*RepeatedNestedRepeatedSigner_Inner `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (m *RepeatedNestedRepeatedSigner) Reset()         { *m = RepeatedNestedRepeatedSigner{} }
func (m *RepeatedNestedRepeatedSigner) String() string { return proto.CompactTextString(m) }
func (*RepeatedNestedRepeatedSigner) ProtoMessage()    {}
func (*RepeatedNestedRepeatedSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{5}
}
func (m *RepeatedNestedRepeatedSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedNestedRepeatedSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepeatedNestedRepeatedSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepeatedNestedRepeatedSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedNestedRepeatedSigner.Merge(m, src)
}
func (m *RepeatedNestedRepeatedSigner) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedNestedRepeatedSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedNestedRepeatedSigner.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedNestedRepeatedSigner proto.InternalMessageInfo

func (m *RepeatedNestedRepeatedSigner) GetInner() []*RepeatedNestedRepeatedSigner_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

type RepeatedNestedRepeatedSigner_Inner struct {
	Signer []string `protobuf:"bytes,1,rep,name=signer,proto3" json:"signer,omitempty"`
}

func (m *RepeatedNestedRepeatedSigner_Inner) Reset()         { *m = RepeatedNestedRepeatedSigner_Inner{} }
func (m *RepeatedNestedRepeatedSigner_Inner) String() string { return proto.CompactTextString(m) }
func (*RepeatedNestedRepeatedSigner_Inner) ProtoMessage()    {}
func (*RepeatedNestedRepeatedSigner_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{5, 0}
}
func (m *RepeatedNestedRepeatedSigner_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedNestedRepeatedSigner_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepeatedNestedRepeatedSigner_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepeatedNestedRepeatedSigner_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedNestedRepeatedSigner_Inner.Merge(m, src)
}
func (m *RepeatedNestedRepeatedSigner_Inner) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedNestedRepeatedSigner_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedNestedRepeatedSigner_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedNestedRepeatedSigner_Inner proto.InternalMessageInfo

func (m *RepeatedNestedRepeatedSigner_Inner) GetSigner() []string {
	if m != nil {
		return m.Signer
	}
	return nil
}

type DeeplyNestedSigner struct {
	InnerOne *DeeplyNestedSigner_InnerOne `protobuf:"bytes,1,opt,name=inner_one,json=innerOne,proto3" json:"inner_one,omitempty"`
}

func (m *DeeplyNestedSigner) Reset()         { *m = DeeplyNestedSigner{} }
func (m *DeeplyNestedSigner) String() string { return proto.CompactTextString(m) }
func (*DeeplyNestedSigner) ProtoMessage()    {}
func (*DeeplyNestedSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{6}
}
func (m *DeeplyNestedSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNestedSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNestedSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeeplyNestedSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNestedSigner.Merge(m, src)
}
func (m *DeeplyNestedSigner) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNestedSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNestedSigner.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNestedSigner proto.InternalMessageInfo

func (m *DeeplyNestedSigner) GetInnerOne() *DeeplyNestedSigner_InnerOne {
	if m != nil {
		return m.InnerOne
	}
	return nil
}

type DeeplyNestedSigner_InnerOne struct {
	InnerTwo *DeeplyNestedSigner_InnerOne_InnerTwo `protobuf:"bytes,1,opt,name=inner_two,json=innerTwo,proto3" json:"inner_two,omitempty"`
}

func (m *DeeplyNestedSigner_InnerOne) Reset()         { *m = DeeplyNestedSigner_InnerOne{} }
func (m *DeeplyNestedSigner_InnerOne) String() string { return proto.CompactTextString(m) }
func (*DeeplyNestedSigner_InnerOne) ProtoMessage()    {}
func (*DeeplyNestedSigner_InnerOne) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{6, 0}
}
func (m *DeeplyNestedSigner_InnerOne) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNestedSigner_InnerOne) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNestedSigner_InnerOne.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeeplyNestedSigner_InnerOne) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNestedSigner_InnerOne.Merge(m, src)
}
func (m *DeeplyNestedSigner_InnerOne) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNestedSigner_InnerOne) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNestedSigner_InnerOne.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNestedSigner_InnerOne proto.InternalMessageInfo

func (m *DeeplyNestedSigner_InnerOne) GetInnerTwo() *DeeplyNestedSigner_InnerOne_InnerTwo {
	if m != nil {
		return m.InnerTwo
	}
	return nil
}

type DeeplyNestedSigner_InnerOne_InnerTwo struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *DeeplyNestedSigner_InnerOne_InnerTwo) Reset()         { *m = DeeplyNestedSigner_InnerOne_InnerTwo{} }
func (m *DeeplyNestedSigner_InnerOne_InnerTwo) String() string { return proto.CompactTextString(m) }
func (*DeeplyNestedSigner_InnerOne_InnerTwo) ProtoMessage()    {}
func (*DeeplyNestedSigner_InnerOne_InnerTwo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{6, 0, 0}
}
func (m *DeeplyNestedSigner_InnerOne_InnerTwo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNestedSigner_InnerOne_InnerTwo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNestedSigner_InnerOne_InnerTwo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeeplyNestedSigner_InnerOne_InnerTwo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNestedSigner_InnerOne_InnerTwo.Merge(m, src)
}
func (m *DeeplyNestedSigner_InnerOne_InnerTwo) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNestedSigner_InnerOne_InnerTwo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNestedSigner_InnerOne_InnerTwo.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNestedSigner_InnerOne_InnerTwo proto.InternalMessageInfo

func (m *DeeplyNestedSigner_InnerOne_InnerTwo) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type DeeplyNestedRepeatedSigner struct {
	Inner []*DeeplyNestedRepeatedSigner_Inner `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (m *DeeplyNestedRepeatedSigner) Reset()         { *m = DeeplyNestedRepeatedSigner{} }
func (m *DeeplyNestedRepeatedSigner) String() string { return proto.CompactTextString(m) }
func (*DeeplyNestedRepeatedSigner) ProtoMessage()    {}
func (*DeeplyNestedRepeatedSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{7}
}
func (m *DeeplyNestedRepeatedSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNestedRepeatedSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNestedRepeatedSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeeplyNestedRepeatedSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNestedRepeatedSigner.Merge(m, src)
}
func (m *DeeplyNestedRepeatedSigner) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNestedRepeatedSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNestedRepeatedSigner.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNestedRepeatedSigner proto.InternalMessageInfo

func (m *DeeplyNestedRepeatedSigner) GetInner() []*DeeplyNestedRepeatedSigner_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

type DeeplyNestedRepeatedSigner_Inner struct {
	Inner []*DeeplyNestedRepeatedSigner_Inner_Inner `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (m *DeeplyNestedRepeatedSigner_Inner) Reset()         { *m = DeeplyNestedRepeatedSigner_Inner{} }
func (m *DeeplyNestedRepeatedSigner_Inner) String() string { return proto.CompactTextString(m) }
func (*DeeplyNestedRepeatedSigner_Inner) ProtoMessage()    {}
func (*DeeplyNestedRepeatedSigner_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{7, 0}
}
func (m *DeeplyNestedRepeatedSigner_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNestedRepeatedSigner_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeeplyNestedRepeatedSigner_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner.Merge(m, src)
}
func (m *DeeplyNestedRepeatedSigner_Inner) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNestedRepeatedSigner_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner proto.InternalMessageInfo

func (m *DeeplyNestedRepeatedSigner_Inner) GetInner() []*DeeplyNestedRepeatedSigner_Inner_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

type DeeplyNestedRepeatedSigner_Inner_Inner struct {
	Inner []*DeeplyNestedRepeatedSigner_Inner_Inner_Bottom `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner) Reset() {
	*m = DeeplyNestedRepeatedSigner_Inner_Inner{}
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner) String() string { return proto.CompactTextString(m) }
func (*DeeplyNestedRepeatedSigner_Inner_Inner) ProtoMessage()    {}
func (*DeeplyNestedRepeatedSigner_Inner_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{7, 0, 0}
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner.Merge(m, src)
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner proto.InternalMessageInfo

func (m *DeeplyNestedRepeatedSigner_Inner_Inner) GetInner() []*DeeplyNestedRepeatedSigner_Inner_Inner_Bottom {
	if m != nil {
		return m.Inner
	}
	return nil
}

type DeeplyNestedRepeatedSigner_Inner_Inner_Bottom struct {
	Signer []string `protobuf:"bytes,1,rep,name=signer,proto3" json:"signer,omitempty"`
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) Reset() {
	*m = DeeplyNestedRepeatedSigner_Inner_Inner_Bottom{}
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) String() string {
	return proto.CompactTextString(m)
}
func (*DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) ProtoMessage() {}
func (*DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{7, 0, 0, 0}
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner_Bottom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner_Bottom.Merge(m, src)
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) XXX_Size() int {
	return m.Size()
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) XXX_DiscardUnknown() {
	xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner_Bottom.DiscardUnknown(m)
}

var xxx_messageInfo_DeeplyNestedRepeatedSigner_Inner_Inner_Bottom proto.InternalMessageInfo

func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) GetSigner() []string {
	if m != nil {
		return m.Signer
	}
	return nil
}

type BadSigner struct {
	Signer []byte `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *BadSigner) Reset()         { *m = BadSigner{} }
func (m *BadSigner) String() string { return proto.CompactTextString(m) }
func (*BadSigner) ProtoMessage()    {}
func (*BadSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{8}
}
func (m *BadSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadSigner.Merge(m, src)
}
func (m *BadSigner) XXX_Size() int {
	return m.Size()
}
func (m *BadSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_BadSigner.DiscardUnknown(m)
}

var xxx_messageInfo_BadSigner proto.InternalMessageInfo

func (m *BadSigner) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

type NoSignerOption struct {
	Signer []byte `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *NoSignerOption) Reset()         { *m = NoSignerOption{} }
func (m *NoSignerOption) String() string { return proto.CompactTextString(m) }
func (*NoSignerOption) ProtoMessage()    {}
func (*NoSignerOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{9}
}
func (m *NoSignerOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoSignerOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoSignerOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoSignerOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoSignerOption.Merge(m, src)
}
func (m *NoSignerOption) XXX_Size() int {
	return m.Size()
}
func (m *NoSignerOption) XXX_DiscardUnknown() {
	xxx_messageInfo_NoSignerOption.DiscardUnknown(m)
}

var xxx_messageInfo_NoSignerOption proto.InternalMessageInfo

func (m *NoSignerOption) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

type ValidatorSigner struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *ValidatorSigner) Reset()         { *m = ValidatorSigner{} }
func (m *ValidatorSigner) String() string { return proto.CompactTextString(m) }
func (*ValidatorSigner) ProtoMessage()    {}
func (*ValidatorSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a07aa6c43d8ee7bd, []int{10}
}
func (m *ValidatorSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSigner.Merge(m, src)
}
func (m *ValidatorSigner) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSigner.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSigner proto.InternalMessageInfo

func (m *ValidatorSigner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func init() {
	proto.RegisterType((*SimpleSigner)(nil), "testpb.SimpleSigner")
	proto.RegisterType((*RepeatedSigner)(nil), "testpb.RepeatedSigner")
	proto.RegisterType((*NestedSigner)(nil), "testpb.NestedSigner")
	proto.RegisterType((*NestedSigner_Inner)(nil), "testpb.NestedSigner.Inner")
	proto.RegisterType((*RepeatedNestedSigner)(nil), "testpb.RepeatedNestedSigner")
	proto.RegisterType((*RepeatedNestedSigner_Inner)(nil), "testpb.RepeatedNestedSigner.Inner")
	proto.RegisterType((*NestedRepeatedSigner)(nil), "testpb.NestedRepeatedSigner")
	proto.RegisterType((*NestedRepeatedSigner_Inner)(nil), "testpb.NestedRepeatedSigner.Inner")
	proto.RegisterType((*RepeatedNestedRepeatedSigner)(nil), "testpb.RepeatedNestedRepeatedSigner")
	proto.RegisterType((*RepeatedNestedRepeatedSigner_Inner)(nil), "testpb.RepeatedNestedRepeatedSigner.Inner")
	proto.RegisterType((*DeeplyNestedSigner)(nil), "testpb.DeeplyNestedSigner")
	proto.RegisterType((*DeeplyNestedSigner_InnerOne)(nil), "testpb.DeeplyNestedSigner.InnerOne")
	proto.RegisterType((*DeeplyNestedSigner_InnerOne_InnerTwo)(nil), "testpb.DeeplyNestedSigner.InnerOne.InnerTwo")
	proto.RegisterType((*DeeplyNestedRepeatedSigner)(nil), "testpb.DeeplyNestedRepeatedSigner")
	proto.RegisterType((*DeeplyNestedRepeatedSigner_Inner)(nil), "testpb.DeeplyNestedRepeatedSigner.Inner")
	proto.RegisterType((*DeeplyNestedRepeatedSigner_Inner_Inner)(nil), "testpb.DeeplyNestedRepeatedSigner.Inner.Inner")
	proto.RegisterType((*DeeplyNestedRepeatedSigner_Inner_Inner_Bottom)(nil), "testpb.DeeplyNestedRepeatedSigner.Inner.Inner.Bottom")
	proto.RegisterType((*BadSigner)(nil), "testpb.BadSigner")
	proto.RegisterType((*NoSignerOption)(nil), "testpb.NoSignerOption")
	proto.RegisterType((*ValidatorSigner)(nil), "testpb.ValidatorSigner")
}

func init() { proto.RegisterFile("testpb/signers.proto", fileDescriptor_a07aa6c43d8ee7bd) }

var fileDescriptor_a07aa6c43d8ee7bd = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0x18, 0x12, 0x9a, 0x97, 0x10, 0x25, 0x04, 0xad, 0x83, 0x2e, 0x3a, 0x5e, 0x42, 0x68,
	0x77, 0x6b, 0x4a, 0xa1, 0xf6, 0x20, 0x31, 0xf4, 0x52, 0x84, 0x16, 0x92, 0x20, 0x88, 0x87, 0x92,
	0xba, 0x43, 0x58, 0x48, 0x76, 0x96, 0x9d, 0xc1, 0xa0, 0x27, 0xf1, 0xe8, 0x45, 0x4f, 0x1e, 0xfc,
	0x15, 0x3d, 0xf8, 0x23, 0x3c, 0x16, 0x0f, 0xe2, 0x51, 0x92, 0x43, 0x0f, 0xfe, 0x08, 0x65, 0x77,
	0x66, 0x9a, 0x4c, 0x9c, 0xc8, 0x16, 0xec, 0x69, 0xe7, 0x7b, 0xf3, 0xbd, 0x6f, 0xbe, 0x79, 0x6f,
	0x78, 0x0b, 0x75, 0x41, 0xb9, 0x88, 0x4e, 0x3c, 0x1e, 0x0c, 0x43, 0x1a, 0x73, 0x37, 0x8a, 0x99,
	0x60, 0xb5, 0xa2, 0x8c, 0xe2, 0x5b, 0x2f, 0x19, 0x1f, 0x33, 0xee, 0x8d, 0xf9, 0xd0, 0x7b, 0xf5,
	0x30, 0xf9, 0x48, 0x02, 0xbe, 0x2d, 0x37, 0x8e, 0x53, 0xe4, 0x49, 0x20, 0xb7, 0xc8, 0x36, 0x54,
	0x7a, 0xc1, 0x38, 0x1a, 0xd1, 0x5e, 0x2a, 0x59, 0xbb, 0x09, 0x45, 0x29, 0xbe, 0x8e, 0xee, 0xa1,
	0x46, 0xa9, 0xab, 0xd0, 0x5e, 0xf9, 0xdd, 0xf9, 0x69, 0x53, 0x01, 0xb2, 0x03, 0xd5, 0x2e, 0x8d,
	0xe8, 0x40, 0x50, 0xdf, 0x92, 0x96, 0x5f, 0x95, 0xf6, 0x06, 0x2a, 0x87, 0x94, 0xcf, 0x93, 0xb6,
	0xa0, 0x10, 0x84, 0xfa, 0xa8, 0x72, 0x0b, 0xbb, 0xf2, 0x1e, 0xee, 0x22, 0xc9, 0x3d, 0x48, 0x18,
	0x5d, 0x49, 0xc4, 0x1b, 0x50, 0x48, 0x71, 0x26, 0x9b, 0x7b, 0x90, 0x00, 0x99, 0x49, 0xde, 0x23,
	0xa8, 0x6b, 0xcf, 0x86, 0x89, 0xdd, 0xb9, 0x89, 0x7c, 0xa3, 0xdc, 0x22, 0xda, 0x84, 0x8d, 0xfc,
	0x3f, 0xcd, 0x48, 0xdd, 0xa5, 0x32, 0xee, 0x9a, 0x15, 0x21, 0x66, 0x45, 0x4c, 0x72, 0x06, 0x33,
	0xf9, 0x2c, 0x66, 0x3e, 0x23, 0xb8, 0x63, 0x5e, 0x76, 0xc9, 0x54, 0xdb, 0xac, 0x50, 0xd3, 0x5e,
	0xa1, 0xab, 0x31, 0xf7, 0x1b, 0x41, 0x6d, 0x9f, 0xd2, 0x68, 0xf4, 0xda, 0x68, 0x5a, 0x1b, 0x4a,
	0xe9, 0xfe, 0x31, 0x0b, 0xa9, 0xaa, 0xd5, 0x03, 0x6d, 0xeb, 0x6f, 0xba, 0x34, 0x73, 0x14, 0xd2,
	0xee, 0x5a, 0xa0, 0x56, 0xf8, 0x13, 0x82, 0x35, 0x1d, 0xae, 0x1d, 0x68, 0x39, 0x31, 0x61, 0x4a,
	0x6e, 0x23, 0x83, 0x9c, 0x5c, 0xf4, 0x27, 0x4c, 0xe9, 0xf6, 0x27, 0x0c, 0x7b, 0x4a, 0xb6, 0x3f,
	0x61, 0xd9, 0xde, 0x45, 0x35, 0x01, 0xf3, 0xe3, 0x0d, 0xcc, 0x42, 0x4a, 0xbe, 0x5f, 0x03, 0xbc,
	0xe8, 0x61, 0xa9, 0x39, 0x8f, 0xcd, 0xe6, 0x34, 0x6c, 0xb6, 0xff, 0xd5, 0x9a, 0x5f, 0x48, 0xf7,
	0x66, 0xdf, 0x54, 0x72, 0xb3, 0x2a, 0x99, 0x7a, 0x1f, 0x2e, 0xf4, 0x9e, 0x9a, 0x7a, 0x3b, 0x97,
	0xd3, 0x73, 0x3b, 0x4c, 0x08, 0x36, 0xd6, 0xb2, 0x9b, 0x50, 0x94, 0x81, 0x4b, 0x3f, 0xa1, 0x55,
	0x6b, 0xb2, 0x05, 0xa5, 0xce, 0xc0, 0xb7, 0x8e, 0xbd, 0x8a, 0x7d, 0x7e, 0x35, 0xa0, 0x7a, 0xc8,
	0x64, 0xc2, 0x51, 0x24, 0x02, 0x16, 0xae, 0x4a, 0x23, 0xcf, 0xe1, 0xfa, 0xb3, 0xc1, 0x28, 0xf0,
	0x07, 0x82, 0xc5, 0xea, 0x84, 0x47, 0xe6, 0x63, 0xe8, 0xdc, 0xff, 0xf6, 0x65, 0xf3, 0xae, 0x1a,
	0xc5, 0x17, 0xdc, 0x27, 0xbe, 0x1f, 0x53, 0xce, 0x7b, 0x22, 0x0e, 0xc2, 0xa1, 0xd5, 0x44, 0xeb,
	0x05, 0xdc, 0xe8, 0x53, 0x2e, 0x8c, 0xa1, 0xdd, 0xb6, 0xc4, 0xea, 0xba, 0xde, 0x8b, 0x51, 0x6c,
	0x8d, 0x92, 0x1c, 0x2e, 0xbc, 0x3d, 0x3f, 0x6d, 0xa2, 0xce, 0xfa, 0xd7, 0xa9, 0x83, 0xce, 0xa6,
	0x0e, 0xfa, 0x39, 0x75, 0xd0, 0xc7, 0x99, 0x93, 0x3b, 0x9b, 0x39, 0xb9, 0x1f, 0x33, 0x27, 0x77,
	0x52, 0x4c, 0x7f, 0x17, 0xdb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xc7, 0x5e, 0x8c, 0x82,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestSimpleSignerClient is the client API for TestSimpleSigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestSimpleSignerClient interface {
	TestSimpleSigner(ctx context.Context, in *SimpleSigner, opts ...grpc.CallOption) (*SimpleSigner, error)
}

type testSimpleSignerClient struct {
	cc grpc1.ClientConn
}

func NewTestSimpleSignerClient(cc grpc1.ClientConn) TestSimpleSignerClient {
	return &testSimpleSignerClient{cc}
}

func (c *testSimpleSignerClient) TestSimpleSigner(ctx context.Context, in *SimpleSigner, opts ...grpc.CallOption) (*SimpleSigner, error) {
	out := new(SimpleSigner)
	err := c.cc.Invoke(ctx, "/testpb.TestSimpleSigner/TestSimpleSigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestSimpleSignerServer is the server API for TestSimpleSigner service.
type TestSimpleSignerServer interface {
	TestSimpleSigner(context.Context, *SimpleSigner) (*SimpleSigner, error)
}

// UnimplementedTestSimpleSignerServer can be embedded to have forward compatible implementations.
type UnimplementedTestSimpleSignerServer struct {
}

func (*UnimplementedTestSimpleSignerServer) TestSimpleSigner(ctx context.Context, req *SimpleSigner) (*SimpleSigner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSimpleSigner not implemented")
}

func RegisterTestSimpleSignerServer(s grpc1.Server, srv TestSimpleSignerServer) {
	s.RegisterService(&_TestSimpleSigner_serviceDesc, srv)
}

func _TestSimpleSigner_TestSimpleSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleSigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSimpleSignerServer).TestSimpleSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testpb.TestSimpleSigner/TestSimpleSigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSimpleSignerServer).TestSimpleSigner(ctx, req.(*SimpleSigner))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestSimpleSigner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testpb.TestSimpleSigner",
	HandlerType: (*TestSimpleSignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestSimpleSigner",
			Handler:    _TestSimpleSigner_TestSimpleSigner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testpb/signers.proto",
}

func (m *SimpleSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for iNdEx := len(m.Signer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signer[iNdEx])
			copy(dAtA[i:], m.Signer[iNdEx])
			i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NestedSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inner != nil {
		{
			size, err := m.Inner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSigners(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NestedSigner_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedSigner_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedSigner_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedNestedSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedNestedSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedNestedSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for iNdEx := len(m.Inner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSigners(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedNestedSigner_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedNestedSigner_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedNestedSigner_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NestedRepeatedSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedRepeatedSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedRepeatedSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inner != nil {
		{
			size, err := m.Inner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSigners(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NestedRepeatedSigner_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedRepeatedSigner_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedRepeatedSigner_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for iNdEx := len(m.Signer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signer[iNdEx])
			copy(dAtA[i:], m.Signer[iNdEx])
			i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedNestedRepeatedSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedNestedRepeatedSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedNestedRepeatedSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for iNdEx := len(m.Inner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSigners(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedNestedRepeatedSigner_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedNestedRepeatedSigner_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedNestedRepeatedSigner_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for iNdEx := len(m.Signer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signer[iNdEx])
			copy(dAtA[i:], m.Signer[iNdEx])
			i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeeplyNestedSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNestedSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeeplyNestedSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InnerOne != nil {
		{
			size, err := m.InnerOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSigners(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeeplyNestedSigner_InnerOne) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNestedSigner_InnerOne) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeeplyNestedSigner_InnerOne) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InnerTwo != nil {
		{
			size, err := m.InnerTwo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSigners(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeeplyNestedSigner_InnerOne_InnerTwo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNestedSigner_InnerOne_InnerTwo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeeplyNestedSigner_InnerOne_InnerTwo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeeplyNestedRepeatedSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNestedRepeatedSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeeplyNestedRepeatedSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for iNdEx := len(m.Inner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSigners(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeeplyNestedRepeatedSigner_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNestedRepeatedSigner_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeeplyNestedRepeatedSigner_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for iNdEx := len(m.Inner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSigners(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for iNdEx := len(m.Inner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSigners(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for iNdEx := len(m.Signer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signer[iNdEx])
			copy(dAtA[i:], m.Signer[iNdEx])
			i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BadSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoSignerOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoSignerOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoSignerOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintSigners(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSigners(dAtA []byte, offset int, v uint64) int {
	offset -= sovSigners(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SimpleSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *RepeatedSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for _, s := range m.Signer {
			l = len(s)
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *NestedSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inner != nil {
		l = m.Inner.Size()
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *NestedSigner_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *RepeatedNestedSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for _, e := range m.Inner {
			l = e.Size()
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *RepeatedNestedSigner_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *NestedRepeatedSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inner != nil {
		l = m.Inner.Size()
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *NestedRepeatedSigner_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for _, s := range m.Signer {
			l = len(s)
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *RepeatedNestedRepeatedSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for _, e := range m.Inner {
			l = e.Size()
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *RepeatedNestedRepeatedSigner_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for _, s := range m.Signer {
			l = len(s)
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *DeeplyNestedSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InnerOne != nil {
		l = m.InnerOne.Size()
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *DeeplyNestedSigner_InnerOne) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InnerTwo != nil {
		l = m.InnerTwo.Size()
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *DeeplyNestedSigner_InnerOne_InnerTwo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *DeeplyNestedRepeatedSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for _, e := range m.Inner {
			l = e.Size()
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *DeeplyNestedRepeatedSigner_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for _, e := range m.Inner {
			l = e.Size()
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inner) > 0 {
		for _, e := range m.Inner {
			l = e.Size()
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signer) > 0 {
		for _, s := range m.Signer {
			l = len(s)
			n += 1 + l + sovSigners(uint64(l))
		}
	}
	return n
}

func (m *BadSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *NoSignerOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func (m *ValidatorSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovSigners(uint64(l))
	}
	return n
}

func sovSigners(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSigners(x uint64) (n int) {
	return sovSigners(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SimpleSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inner == nil {
				m.Inner = &NestedSigner_Inner{}
			}
			if err := m.Inner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedSigner_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedNestedSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedNestedSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedNestedSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner, &RepeatedNestedSigner_Inner{})
			if err := m.Inner[len(m.Inner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedNestedSigner_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedRepeatedSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedRepeatedSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedRepeatedSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inner == nil {
				m.Inner = &NestedRepeatedSigner_Inner{}
			}
			if err := m.Inner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedRepeatedSigner_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedNestedRepeatedSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedNestedRepeatedSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedNestedRepeatedSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner, &RepeatedNestedRepeatedSigner_Inner{})
			if err := m.Inner[len(m.Inner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedNestedRepeatedSigner_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNestedSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeeplyNestedSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeeplyNestedSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerOne == nil {
				m.InnerOne = &DeeplyNestedSigner_InnerOne{}
			}
			if err := m.InnerOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNestedSigner_InnerOne) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerOne: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerOne: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerTwo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerTwo == nil {
				m.InnerTwo = &DeeplyNestedSigner_InnerOne_InnerTwo{}
			}
			if err := m.InnerTwo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNestedSigner_InnerOne_InnerTwo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerTwo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerTwo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNestedRepeatedSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeeplyNestedRepeatedSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeeplyNestedRepeatedSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner, &DeeplyNestedRepeatedSigner_Inner{})
			if err := m.Inner[len(m.Inner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNestedRepeatedSigner_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner, &DeeplyNestedRepeatedSigner_Inner_Inner{})
			if err := m.Inner[len(m.Inner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner, &DeeplyNestedRepeatedSigner_Inner_Inner_Bottom{})
			if err := m.Inner[len(m.Inner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeeplyNestedRepeatedSigner_Inner_Inner_Bottom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bottom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bottom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoSignerOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoSignerOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoSignerOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigners(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigners
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigners
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSigners
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSigners
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSigners
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSigners        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigners          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSigners = fmt.Errorf("proto: unexpected end of group")
)
