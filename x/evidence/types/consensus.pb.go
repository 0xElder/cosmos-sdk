// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/evidence/v1beta1/consensus.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The type of misbehavior committed by a validator.
type MisbehaviorType int32

const (
	// Unknown
	MisbehaviorType_MISBEHAVIOR_TYPE_UNSPECIFIED MisbehaviorType = 0
	// Duplicate vote
	MisbehaviorType_MISBEHAVIOR_TYPE_DUPLICATE_VOTE MisbehaviorType = 1
	// Light client attack
	MisbehaviorType_MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK MisbehaviorType = 2
)

var MisbehaviorType_name = map[int32]string{
	0: "MISBEHAVIOR_TYPE_UNSPECIFIED",
	1: "MISBEHAVIOR_TYPE_DUPLICATE_VOTE",
	2: "MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK",
}

var MisbehaviorType_value = map[string]int32{
	"MISBEHAVIOR_TYPE_UNSPECIFIED":         0,
	"MISBEHAVIOR_TYPE_DUPLICATE_VOTE":      1,
	"MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK": 2,
}

func (x MisbehaviorType) String() string {
	return proto.EnumName(MisbehaviorType_name, int32(x))
}

func (MisbehaviorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8edc082f4c5b176f, []int{0}
}

// Misbehavior is a type of misbehavior committed by a validator.
type Misbehavior struct {
	Type MisbehaviorType `protobuf:"varint,1,opt,name=type,proto3,enum=cosmos.evidence.v1beta1.MisbehaviorType" json:"type,omitempty"`
	// The offending validator
	ConsensusAddress []byte `protobuf:"bytes,2,opt,name=consensus_address,json=consensusAddress,proto3" json:"consensus_address,omitempty"`
	// The height when the offense occurred
	Height int64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// The corresponding time where the offense occurred
	Time time.Time `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time"`
	// Total voting power of the validator set in case the ABCI application does
	// not store historical validators.
	// https://github.com/tendermint/tendermint/issues/4581
	TotalVotingPower int64 `protobuf:"varint,5,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
}

func (m *Misbehavior) Reset()         { *m = Misbehavior{} }
func (m *Misbehavior) String() string { return proto.CompactTextString(m) }
func (*Misbehavior) ProtoMessage()    {}
func (*Misbehavior) Descriptor() ([]byte, []int) {
	return fileDescriptor_8edc082f4c5b176f, []int{0}
}
func (m *Misbehavior) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Misbehavior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Misbehavior.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Misbehavior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Misbehavior.Merge(m, src)
}
func (m *Misbehavior) XXX_Size() int {
	return m.Size()
}
func (m *Misbehavior) XXX_DiscardUnknown() {
	xxx_messageInfo_Misbehavior.DiscardUnknown(m)
}

var xxx_messageInfo_Misbehavior proto.InternalMessageInfo

func (m *Misbehavior) GetType() MisbehaviorType {
	if m != nil {
		return m.Type
	}
	return MisbehaviorType_MISBEHAVIOR_TYPE_UNSPECIFIED
}

func (m *Misbehavior) GetConsensusAddress() []byte {
	if m != nil {
		return m.ConsensusAddress
	}
	return nil
}

func (m *Misbehavior) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Misbehavior) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *Misbehavior) GetTotalVotingPower() int64 {
	if m != nil {
		return m.TotalVotingPower
	}
	return 0
}

// ConsensusEvidence is a type of evidence that is committed by a validator
type ConsensusEvidenceMsg struct {
	Misbehaviors []*Misbehavior `protobuf:"bytes,1,rep,name=misbehaviors,proto3" json:"misbehaviors,omitempty"`
}

func (m *ConsensusEvidenceMsg) Reset()         { *m = ConsensusEvidenceMsg{} }
func (m *ConsensusEvidenceMsg) String() string { return proto.CompactTextString(m) }
func (*ConsensusEvidenceMsg) ProtoMessage()    {}
func (*ConsensusEvidenceMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8edc082f4c5b176f, []int{1}
}
func (m *ConsensusEvidenceMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusEvidenceMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusEvidenceMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusEvidenceMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusEvidenceMsg.Merge(m, src)
}
func (m *ConsensusEvidenceMsg) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusEvidenceMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusEvidenceMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusEvidenceMsg proto.InternalMessageInfo

func (m *ConsensusEvidenceMsg) GetMisbehaviors() []*Misbehavior {
	if m != nil {
		return m.Misbehaviors
	}
	return nil
}

func init() {
	proto.RegisterEnum("cosmos.evidence.v1beta1.MisbehaviorType", MisbehaviorType_name, MisbehaviorType_value)
	proto.RegisterType((*Misbehavior)(nil), "cosmos.evidence.v1beta1.Misbehavior")
	proto.RegisterType((*ConsensusEvidenceMsg)(nil), "cosmos.evidence.v1beta1.ConsensusEvidenceMsg")
}

func init() {
	proto.RegisterFile("cosmos/evidence/v1beta1/consensus.proto", fileDescriptor_8edc082f4c5b176f)
}

var fileDescriptor_8edc082f4c5b176f = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xe3, 0xb5, 0x4c, 0xc8, 0x9d, 0x20, 0x58, 0x13, 0x44, 0x15, 0xa4, 0xd1, 0x98, 0x44,
	0x04, 0xc8, 0xd1, 0xca, 0x05, 0x09, 0x2e, 0x69, 0x66, 0x68, 0x44, 0xbb, 0x55, 0x99, 0x57, 0x09,
	0x2e, 0x26, 0x6d, 0x4d, 0x1a, 0xb1, 0xd6, 0x51, 0xed, 0x15, 0x76, 0xe5, 0x09, 0xf6, 0x18, 0x3c,
	0xca, 0x8e, 0x3b, 0x72, 0x02, 0xd4, 0xbe, 0x04, 0x47, 0x14, 0xa7, 0xd9, 0x80, 0x09, 0x69, 0xb7,
	0x7c, 0xdf, 0xf7, 0xfb, 0xc7, 0xdf, 0xff, 0x6f, 0xc3, 0x47, 0x43, 0x21, 0x27, 0x42, 0x7a, 0x7c,
	0x9e, 0x8e, 0xf8, 0x74, 0xc8, 0xbd, 0xf9, 0xce, 0x80, 0xab, 0x78, 0xc7, 0x1b, 0x8a, 0xa9, 0xe4,
	0x53, 0x79, 0x2c, 0x71, 0x36, 0x13, 0x4a, 0xa0, 0x7b, 0x05, 0x88, 0x4b, 0x10, 0xaf, 0xc0, 0xfa,
	0x66, 0x22, 0x12, 0xa1, 0x19, 0x2f, 0xff, 0x2a, 0xf0, 0x7a, 0x23, 0x11, 0x22, 0x39, 0xe2, 0x9e,
	0xae, 0x06, 0xc7, 0x1f, 0x3c, 0x95, 0x4e, 0xb8, 0x54, 0xf1, 0x24, 0x2b, 0x80, 0xad, 0x5f, 0x00,
	0xd6, 0xba, 0xa9, 0x1c, 0xf0, 0x71, 0x3c, 0x4f, 0xc5, 0x0c, 0xbd, 0x84, 0x55, 0x75, 0x92, 0x71,
	0x0b, 0x38, 0xc0, 0xbd, 0xd5, 0x74, 0xf1, 0x7f, 0x8e, 0xc3, 0x7f, 0x68, 0xe8, 0x49, 0xc6, 0x23,
	0xad, 0x42, 0x4f, 0xe0, 0x9d, 0x8b, 0x85, 0x59, 0x3c, 0x1a, 0xcd, 0xb8, 0x94, 0xd6, 0x9a, 0x03,
	0xdc, 0x8d, 0xc8, 0xbc, 0x18, 0xf8, 0x45, 0x1f, 0xdd, 0x85, 0xeb, 0x63, 0x9e, 0x26, 0x63, 0x65,
	0x55, 0x1c, 0xe0, 0x56, 0xa2, 0x55, 0x85, 0x9e, 0xc3, 0x6a, 0xbe, 0xa5, 0x55, 0x75, 0x80, 0x5b,
	0x6b, 0xd6, 0x71, 0x61, 0x01, 0x97, 0x16, 0x30, 0x2d, 0x2d, 0xb4, 0x6e, 0x9e, 0x7d, 0x6f, 0x18,
	0xa7, 0x3f, 0x1a, 0x20, 0xd2, 0x0a, 0xf4, 0x14, 0x22, 0x25, 0x54, 0x7c, 0xc4, 0xe6, 0x42, 0xa5,
	0xd3, 0x84, 0x65, 0xe2, 0x13, 0x9f, 0x59, 0x37, 0xf4, 0xdf, 0x4d, 0x3d, 0xe9, 0xeb, 0x41, 0x2f,
	0xef, 0x6f, 0xbd, 0x87, 0x9b, 0x41, 0xb9, 0x13, 0x59, 0xf9, 0xeb, 0xca, 0x04, 0xb5, 0xe1, 0xc6,
	0xe4, 0xd2, 0x9d, 0xb4, 0x80, 0x53, 0x71, 0x6b, 0xcd, 0xed, 0xeb, 0x44, 0x11, 0xfd, 0xa5, 0x7c,
	0xfc, 0x05, 0xc0, 0xdb, 0xff, 0x04, 0x85, 0x1c, 0x78, 0xbf, 0x1b, 0x1e, 0xb4, 0x48, 0xdb, 0xef,
	0x87, 0xfb, 0x11, 0xa3, 0x6f, 0x7b, 0x84, 0x1d, 0xee, 0x1d, 0xf4, 0x48, 0x10, 0xbe, 0x0a, 0xc9,
	0xae, 0x69, 0xa0, 0x87, 0xb0, 0x71, 0x85, 0xd8, 0x3d, 0xec, 0x75, 0xc2, 0xc0, 0xa7, 0x84, 0xf5,
	0xf7, 0x29, 0x31, 0x01, 0x72, 0xe1, 0xf6, 0x15, 0xa8, 0x13, 0xbe, 0x6e, 0x53, 0x16, 0x74, 0x42,
	0xb2, 0x47, 0x99, 0x4f, 0xa9, 0x1f, 0xbc, 0x31, 0xd7, 0x5a, 0x2f, 0xbe, 0x2e, 0x6c, 0x70, 0xb6,
	0xb0, 0xc1, 0xf9, 0xc2, 0x06, 0x3f, 0x17, 0x36, 0x38, 0x5d, 0xda, 0xc6, 0xf9, 0xd2, 0x36, 0xbe,
	0x2d, 0x6d, 0xe3, 0xdd, 0x83, 0xc2, 0x95, 0x1c, 0x7d, 0xc4, 0xa9, 0xf0, 0x3e, 0x5f, 0x3e, 0xc0,
	0xfc, 0x3e, 0xe5, 0x60, 0x5d, 0xa7, 0xfe, 0xec, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x5c,
	0xc8, 0x3a, 0xa0, 0x02, 0x00, 0x00,
}

func (this *Misbehavior) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Misbehavior)
	if !ok {
		that2, ok := that.(Misbehavior)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.ConsensusAddress, that1.ConsensusAddress) {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if this.TotalVotingPower != that1.TotalVotingPower {
		return false
	}
	return true
}
func (this *ConsensusEvidenceMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsensusEvidenceMsg)
	if !ok {
		that2, ok := that.(ConsensusEvidenceMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Misbehaviors) != len(that1.Misbehaviors) {
		return false
	}
	for i := range this.Misbehaviors {
		if !this.Misbehaviors[i].Equal(that1.Misbehaviors[i]) {
			return false
		}
	}
	return true
}
func (m *Misbehavior) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Misbehavior) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Misbehavior) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalVotingPower != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.TotalVotingPower))
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintConsensus(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.Height != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConsensusAddress) > 0 {
		i -= len(m.ConsensusAddress)
		copy(dAtA[i:], m.ConsensusAddress)
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.ConsensusAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusEvidenceMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusEvidenceMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusEvidenceMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Misbehaviors) > 0 {
		for iNdEx := len(m.Misbehaviors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Misbehaviors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsensus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsensus(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsensus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Misbehavior) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovConsensus(uint64(m.Type))
	}
	l = len(m.ConsensusAddress)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovConsensus(uint64(m.Height))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovConsensus(uint64(l))
	if m.TotalVotingPower != 0 {
		n += 1 + sovConsensus(uint64(m.TotalVotingPower))
	}
	return n
}

func (m *ConsensusEvidenceMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Misbehaviors) > 0 {
		for _, e := range m.Misbehaviors {
			l = e.Size()
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func sovConsensus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsensus(x uint64) (n int) {
	return sovConsensus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Misbehavior) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Misbehavior: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Misbehavior: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MisbehaviorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusAddress = append(m.ConsensusAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusAddress == nil {
				m.ConsensusAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			m.TotalVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusEvidenceMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusEvidenceMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusEvidenceMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misbehaviors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misbehaviors = append(m.Misbehaviors, &Misbehavior{})
			if err := m.Misbehaviors[len(m.Misbehaviors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsensus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsensus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsensus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsensus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsensus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsensus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsensus = fmt.Errorf("proto: unexpected end of group")
)
