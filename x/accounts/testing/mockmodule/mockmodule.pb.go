// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/accounts/testing/mockmodule/mockmodule.proto

package mockmodule

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgEcho struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgEcho) Reset()         { *m = MsgEcho{} }
func (m *MsgEcho) String() string { return proto.CompactTextString(m) }
func (*MsgEcho) ProtoMessage()    {}
func (*MsgEcho) Descriptor() ([]byte, []int) {
	return fileDescriptor_f978f40e9d5f3c69, []int{0}
}
func (m *MsgEcho) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEcho) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEcho.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEcho) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEcho.Merge(m, src)
}
func (m *MsgEcho) XXX_Size() int {
	return m.Size()
}
func (m *MsgEcho) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEcho.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEcho proto.InternalMessageInfo

func (m *MsgEcho) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgEcho) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type MsgEchoResponse struct {
	MsgEcho string `protobuf:"bytes,1,opt,name=msg_echo,json=msgEcho,proto3" json:"msg_echo,omitempty"`
}

func (m *MsgEchoResponse) Reset()         { *m = MsgEchoResponse{} }
func (m *MsgEchoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEchoResponse) ProtoMessage()    {}
func (*MsgEchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f978f40e9d5f3c69, []int{1}
}
func (m *MsgEchoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEchoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEchoResponse.Merge(m, src)
}
func (m *MsgEchoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEchoResponse proto.InternalMessageInfo

func (m *MsgEchoResponse) GetMsgEcho() string {
	if m != nil {
		return m.MsgEcho
	}
	return ""
}

type QueryEchoRequest struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *QueryEchoRequest) Reset()         { *m = QueryEchoRequest{} }
func (m *QueryEchoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEchoRequest) ProtoMessage()    {}
func (*QueryEchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f978f40e9d5f3c69, []int{2}
}
func (m *QueryEchoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEchoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEchoRequest.Merge(m, src)
}
func (m *QueryEchoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEchoRequest proto.InternalMessageInfo

func (m *QueryEchoRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type QueryEchoResponse struct {
	MsgEcho string `protobuf:"bytes,1,opt,name=msg_echo,json=msgEcho,proto3" json:"msg_echo,omitempty"`
}

func (m *QueryEchoResponse) Reset()         { *m = QueryEchoResponse{} }
func (m *QueryEchoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEchoResponse) ProtoMessage()    {}
func (*QueryEchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f978f40e9d5f3c69, []int{3}
}
func (m *QueryEchoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEchoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEchoResponse.Merge(m, src)
}
func (m *QueryEchoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEchoResponse proto.InternalMessageInfo

func (m *QueryEchoResponse) GetMsgEcho() string {
	if m != nil {
		return m.MsgEcho
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgEcho)(nil), "cosmos.accounts.testing.mockmodule.MsgEcho")
	proto.RegisterType((*MsgEchoResponse)(nil), "cosmos.accounts.testing.mockmodule.MsgEchoResponse")
	proto.RegisterType((*QueryEchoRequest)(nil), "cosmos.accounts.testing.mockmodule.QueryEchoRequest")
	proto.RegisterType((*QueryEchoResponse)(nil), "cosmos.accounts.testing.mockmodule.QueryEchoResponse")
}

func init() {
	proto.RegisterFile("cosmos/accounts/testing/mockmodule/mockmodule.proto", fileDescriptor_f978f40e9d5f3c69)
}

var fileDescriptor_f978f40e9d5f3c69 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4e, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0xd6, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0x29, 0xd6, 0x2f, 0x49, 0x2d, 0x2e,
	0xc9, 0xcc, 0x4b, 0xd7, 0xcf, 0xcd, 0x4f, 0xce, 0xce, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x45, 0x62,
	0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x29, 0x41, 0x34, 0xe9, 0xc1, 0x34, 0xe9, 0x41, 0x35,
	0xe9, 0x21, 0x54, 0x4a, 0x89, 0x43, 0x0d, 0xce, 0x2d, 0x4e, 0xd7, 0x2f, 0x33, 0x04, 0x51, 0x10,
	0xcd, 0x4a, 0x0e, 0x5c, 0xec, 0xbe, 0xc5, 0xe9, 0xae, 0xc9, 0x19, 0xf9, 0x42, 0x62, 0x5c, 0x6c,
	0xc5, 0xa9, 0x79, 0x29, 0xa9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90,
	0x00, 0x17, 0x73, 0x6e, 0x71, 0xba, 0x04, 0x13, 0x58, 0x10, 0xc4, 0xb4, 0xe2, 0x6e, 0x7a, 0xbe,
	0x41, 0x0b, 0x2a, 0xad, 0xa4, 0xc3, 0xc5, 0x0f, 0x35, 0x21, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf,
	0x38, 0x55, 0x48, 0x92, 0x8b, 0x23, 0xb7, 0x38, 0x3d, 0x3e, 0x35, 0x39, 0x23, 0x1f, 0x6a, 0x16,
	0x7b, 0x2e, 0x44, 0x89, 0x92, 0x0a, 0x97, 0x40, 0x60, 0x69, 0x6a, 0x51, 0x25, 0x44, 0x7d, 0x61,
	0x69, 0x6a, 0x71, 0x09, 0xcc, 0x02, 0x46, 0xb8, 0x05, 0x4a, 0x7a, 0x5c, 0x82, 0x48, 0xaa, 0x08,
	0x9a, 0xea, 0xe4, 0x72, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x5a, 0x10,
	0x8f, 0x17, 0xa7, 0x64, 0xeb, 0x65, 0xe6, 0xeb, 0x57, 0xe0, 0x0b, 0xd9, 0x24, 0x36, 0x70, 0x90,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xed, 0xe1, 0x2c, 0xa9, 0x86, 0x01, 0x00, 0x00,
}

func (m *MsgEcho) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEcho) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEcho) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMockmodule(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMockmodule(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEchoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEchoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEchoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgEcho) > 0 {
		i -= len(m.MsgEcho)
		copy(dAtA[i:], m.MsgEcho)
		i = encodeVarintMockmodule(dAtA, i, uint64(len(m.MsgEcho)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEchoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEchoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEchoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMockmodule(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEchoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEchoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEchoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgEcho) > 0 {
		i -= len(m.MsgEcho)
		copy(dAtA[i:], m.MsgEcho)
		i = encodeVarintMockmodule(dAtA, i, uint64(len(m.MsgEcho)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMockmodule(dAtA []byte, offset int, v uint64) int {
	offset -= sovMockmodule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgEcho) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMockmodule(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMockmodule(uint64(l))
	}
	return n
}

func (m *MsgEchoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgEcho)
	if l > 0 {
		n += 1 + l + sovMockmodule(uint64(l))
	}
	return n
}

func (m *QueryEchoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMockmodule(uint64(l))
	}
	return n
}

func (m *QueryEchoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgEcho)
	if l > 0 {
		n += 1 + l + sovMockmodule(uint64(l))
	}
	return n
}

func sovMockmodule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMockmodule(x uint64) (n int) {
	return sovMockmodule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgEcho) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockmodule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEcho: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEcho: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockmodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockmodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockmodule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockmodule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEchoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockmodule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEchoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEchoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgEcho", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockmodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgEcho = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockmodule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockmodule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEchoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockmodule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEchoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEchoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockmodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockmodule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockmodule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEchoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockmodule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEchoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEchoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgEcho", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockmodule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockmodule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockmodule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgEcho = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockmodule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockmodule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMockmodule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMockmodule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockmodule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockmodule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMockmodule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMockmodule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMockmodule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMockmodule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMockmodule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMockmodule = fmt.Errorf("proto: unexpected end of group")
)
