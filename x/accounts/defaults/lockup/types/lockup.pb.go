// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/accounts/defaults/lockup/lockup.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Period defines a length of time and amount of coins that will be lock.
type Period struct {
	// Period duration
	Length time.Duration                            `protobuf:"bytes,1,opt,name=length,proto3,stdduration" json:"length"`
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *Period) Reset()         { *m = Period{} }
func (m *Period) String() string { return proto.CompactTextString(m) }
func (*Period) ProtoMessage()    {}
func (*Period) Descriptor() ([]byte, []int) {
	return fileDescriptor_79b466256e1a079c, []int{0}
}
func (m *Period) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Period) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Period.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Period) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Period.Merge(m, src)
}
func (m *Period) XXX_Size() int {
	return m.Size()
}
func (m *Period) XXX_DiscardUnknown() {
	xxx_messageInfo_Period.DiscardUnknown(m)
}

var xxx_messageInfo_Period proto.InternalMessageInfo

func (m *Period) GetLength() time.Duration {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Period) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// UnbondingClawback defines an tracking for unbonding clawback operation.
type UnbondingClawback struct {
	// end_time defines expected end time of unbonding periods
	EndTime time.Time `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// end_time defines expected end time of unbonding periods
	UnbondingAmt github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=unbonding_amt,json=unbondingAmt,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"unbonding_amt"`
}

func (m *UnbondingClawback) Reset()         { *m = UnbondingClawback{} }
func (m *UnbondingClawback) String() string { return proto.CompactTextString(m) }
func (*UnbondingClawback) ProtoMessage()    {}
func (*UnbondingClawback) Descriptor() ([]byte, []int) {
	return fileDescriptor_79b466256e1a079c, []int{1}
}
func (m *UnbondingClawback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingClawback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingClawback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingClawback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingClawback.Merge(m, src)
}
func (m *UnbondingClawback) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingClawback) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingClawback.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingClawback proto.InternalMessageInfo

func (m *UnbondingClawback) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *UnbondingClawback) GetUnbondingAmt() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.UnbondingAmt
	}
	return nil
}

func init() {
	proto.RegisterType((*Period)(nil), "cosmos.accounts.defaults.lockup.Period")
	proto.RegisterType((*UnbondingClawback)(nil), "cosmos.accounts.defaults.lockup.UnbondingClawback")
}

func init() {
	proto.RegisterFile("cosmos/accounts/defaults/lockup/lockup.proto", fileDescriptor_79b466256e1a079c)
}

var fileDescriptor_79b466256e1a079c = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xb1, 0x8e, 0xd3, 0x30,
	0x1c, 0xc6, 0x63, 0x90, 0x02, 0x0a, 0x77, 0xc3, 0x45, 0x0c, 0x47, 0x87, 0xe4, 0x74, 0xd3, 0xe9,
	0xc4, 0xd9, 0x3a, 0x78, 0x01, 0x68, 0x2b, 0x58, 0x11, 0x82, 0x85, 0xa5, 0x72, 0x6c, 0xd7, 0xb5,
	0x12, 0xfb, 0x5f, 0xd5, 0x0e, 0xd0, 0x17, 0x60, 0xee, 0x88, 0x78, 0x02, 0xc4, 0xd4, 0x97, 0x40,
	0xea, 0xd8, 0x91, 0x89, 0xa2, 0x74, 0xe8, 0x6b, 0xa0, 0xc4, 0x4e, 0x07, 0x10, 0x2b, 0x4b, 0xec,
	0xe8, 0xff, 0xff, 0xbe, 0x2f, 0xbf, 0x4f, 0x49, 0x1e, 0x33, 0xb0, 0x1a, 0x2c, 0xa1, 0x8c, 0x41,
	0x6d, 0x9c, 0x25, 0x5c, 0x4c, 0x69, 0x5d, 0x39, 0x4b, 0x2a, 0x60, 0x65, 0x3d, 0x0f, 0x07, 0x9e,
	0x2f, 0xc0, 0x41, 0x9a, 0xfb, 0x6d, 0xdc, 0x6f, 0xe3, 0x7e, 0x1b, 0xfb, 0xb5, 0xc1, 0x19, 0xd5,
	0xca, 0x00, 0xe9, 0x9e, 0x5e, 0x33, 0xc8, 0x42, 0x42, 0x41, 0xad, 0x20, 0xef, 0x6f, 0x0b, 0xe1,
	0xe8, 0x2d, 0x61, 0xa0, 0x4c, 0x98, 0x3f, 0x94, 0x20, 0xa1, 0xbb, 0x92, 0xf6, 0xd6, 0xab, 0x24,
	0x80, 0xac, 0x04, 0xe9, 0xde, 0x8a, 0x7a, 0x4a, 0x78, 0xbd, 0xa0, 0x4e, 0x41, 0xaf, 0xca, 0xff,
	0x9c, 0x3b, 0xa5, 0x85, 0x75, 0x54, 0x87, 0x4f, 0xbd, 0xfc, 0x8e, 0x92, 0xf8, 0x95, 0x58, 0x28,
	0xe0, 0xe9, 0xb3, 0x24, 0xae, 0x84, 0x91, 0x6e, 0x76, 0x8e, 0x2e, 0xd0, 0xd5, 0x83, 0x27, 0x8f,
	0xb0, 0x17, 0xe3, 0x5e, 0x8c, 0xc7, 0xc1, 0x7c, 0x78, 0xba, 0xf9, 0x99, 0x47, 0x9f, 0x77, 0x39,
	0xfa, 0x7a, 0x58, 0x5f, 0xa3, 0xd7, 0x41, 0x97, 0x2e, 0x93, 0x98, 0xea, 0x96, 0xf8, 0xfc, 0xce,
	0xc5, 0xdd, 0xce, 0x21, 0x14, 0xd1, 0x42, 0xe1, 0x00, 0x85, 0x47, 0xa0, 0xcc, 0xf0, 0x45, 0xeb,
	0xf0, 0x6d, 0x97, 0x5f, 0x49, 0xe5, 0x66, 0x75, 0x81, 0x19, 0x68, 0x12, 0x1a, 0xf0, 0xc7, 0x8d,
	0xe5, 0x25, 0x71, 0xcb, 0xb9, 0xb0, 0x9d, 0xc0, 0x7e, 0x39, 0xac, 0xaf, 0x4f, 0x2a, 0x21, 0x29,
	0x5b, 0x4e, 0xda, 0x5a, 0x6c, 0x88, 0xf6, 0x81, 0x97, 0x0d, 0x4a, 0xce, 0xde, 0x9a, 0x02, 0x0c,
	0x57, 0x46, 0x8e, 0x2a, 0xfa, 0xa1, 0xa0, 0xac, 0x4c, 0xc7, 0xc9, 0x7d, 0x61, 0xf8, 0xa4, 0x85,
	0x0e, 0x50, 0x83, 0xbf, 0xa0, 0xde, 0xf4, 0x8d, 0x78, 0xaa, 0xd5, 0x91, 0xea, 0x9e, 0x30, 0xbc,
	0x1d, 0xa6, 0x9f, 0x50, 0x72, 0x5a, 0xf7, 0xde, 0x13, 0xaa, 0xff, 0x23, 0xde, 0xc9, 0x31, 0xf7,
	0xb9, 0x76, 0xc3, 0x97, 0x9b, 0x26, 0x43, 0xdb, 0x26, 0x43, 0xbf, 0x9a, 0x0c, 0xad, 0xf6, 0x59,
	0xb4, 0xdd, 0x67, 0xd1, 0x8f, 0x7d, 0x16, 0xbd, 0xbb, 0xf1, 0xae, 0x96, 0x97, 0x58, 0x01, 0xf9,
	0xf8, 0xef, 0xff, 0xb4, 0x8b, 0x2c, 0xe2, 0x8e, 0xfe, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6d, 0xa9, 0x0a, 0xce, 0xd7, 0x02, 0x00, 0x00,
}

func (m *Period) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Period) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Period) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLockup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Length, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Length):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLockup(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UnbondingClawback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingClawback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingClawback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingAmt) > 0 {
		for iNdEx := len(m.UnbondingAmt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingAmt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLockup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLockup(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLockup(dAtA []byte, offset int, v uint64) int {
	offset -= sovLockup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Period) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Length)
	n += 1 + l + sovLockup(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovLockup(uint64(l))
		}
	}
	return n
}

func (m *UnbondingClawback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovLockup(uint64(l))
	if len(m.UnbondingAmt) > 0 {
		for _, e := range m.UnbondingAmt {
			l = e.Size()
			n += 1 + l + sovLockup(uint64(l))
		}
	}
	return n
}

func sovLockup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLockup(x uint64) (n int) {
	return sovLockup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Period) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Period: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Period: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Length, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingClawback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingClawback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingClawback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingAmt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingAmt = append(m.UnbondingAmt, types.Coin{})
			if err := m.UnbondingAmt[len(m.UnbondingAmt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLockup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLockup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLockup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLockup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLockup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLockup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLockup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLockup = fmt.Errorf("proto: unexpected end of group")
)
