syntax = "proto3";

package cosmos.accounts.extensions.feegrant.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "cosmossdk.io/x/accounts/extensions/feegrant/v1";

// QueryAllowanceRequest is the request type to query the allowance for a known grantee address.
message QueryAllowanceRequest {
  // grantee is the address of the user being granted an allowance of another user's funds.
  string grantee = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
message QueryAllowanceResponse {
  // allowance is a allowance granted for grantee by granter.
  google.protobuf.Any allowance = 1 [(cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
}

// QueryAllAllowanceRequest is the request type to query all allowances registered for an account
message QueryAllAllowanceRequest {
  // pagination defines an pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllowancesByGranterResponse is the response type to the QueryAllAllowanceRequest query.
message QueryAllAllowanceRequestResponse {
  // allowances that have been issued by the granter.
  repeated GrantedAllowance allowances = 1;

  // pagination defines an pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// GrantedAllowance grantee, allowance pair
message GrantedAllowance {
  // grantee is the address of the user being granted an allowance of another user's funds.
  string grantee = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // allowance can be any of basic, periodic, allowed fee allowance.
  google.protobuf.Any allowance = 2 [(cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
}
