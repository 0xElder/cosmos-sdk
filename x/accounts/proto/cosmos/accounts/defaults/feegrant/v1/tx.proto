syntax = "proto3";

package cosmos.accounts.defaults.feegrant.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "amino/amino.proto";

option go_package = "cosmossdk.io/x/accounts/defaults/feegrant/v1";

// MsgInit is used to initialize a feegrant account.
message MsgInit {}

// MsgInitResponse is the response returned after account initialization.
message MsgInitResponse {}

// MsgGrantAllowance adds permission for Grantee to spend up to Allowance
// of fees from the account of Granter.
message MsgGrantAllowance {
  // grantee is the address of the user being granted an allowance of another user's funds.
  string grantee = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // allowance can be any of basic, periodic, allowed fee allowance.
  google.protobuf.Any allowance = 3 [(cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
}

message MsgGrantAllowanceResponse {}

message MsgUseGrantedFees {
  // grantee is the address of the user being granted an allowance of another user's funds.
  string grantee = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  repeated cosmos.base.v1beta1.Coin fees = 2 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated google.protobuf.Any msgs = 3 [(cosmos_proto.accepts_interface) = "cosmos.base.v1beta1.Msg"];
}

message MsgUseGrantedFeesResponse {}

// BasicAllowance implements Allowance with a one-time grant of coins
// that optionally expires. The grantee can use up to SpendLimit to cover fees.
message BasicAllowance {
  option (cosmos_proto.implements_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI";
  option (amino.name)                        = "cosmos-sdk/BasicAllowance";

  // spend_limit specifies the maximum amount of coins that can be spent
  // by this allowance and will be updated as coins are spent. If it is
  // empty, there is no spend limit and any amount of coins can be spent.
  repeated cosmos.base.v1beta1.Coin spend_limit = 1 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // expiration specifies an optional time when this allowance expires
  google.protobuf.Timestamp expiration = 2 [(gogoproto.stdtime) = true];
}