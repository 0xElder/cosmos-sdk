use std::io::Read;

use prost::Message;
use prost_types::FileDescriptorProto;
use std::borrow::Borrow;
use std::{env, fs};
use std::path::Path;

use crate::ctx::Context;
use crate::file::gen_file;

mod message;
mod field;
mod file;
mod ctx;
mod r#type;
mod opts;
mod service;
mod method;

#[cfg(test)]
mod tests {
    use std::borrow::Borrow;

    #[test]
    fn test1() {
    }
}

pub fn compile_protos() -> std::io::Result<()> {
    // 298 bytes of a gzipped FileDescriptorProto
    let bz: &[u8] = &[0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xce, 0x2f, 0xce,
        0xcd, 0x2f, 0xd6, 0xcf, 0x4b, 0x2b, 0xd1, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34, 0xd4, 0x2f,
        0xa9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x82, 0x48, 0xea, 0xe5, 0xa5, 0x95, 0xe8,
        0x41, 0x25, 0xa5, 0x24, 0x21, 0x62, 0xf1, 0x60, 0x15, 0xfa, 0x50, 0x05, 0x60, 0x8e, 0x94, 0x38,
        0xd4, 0xac, 0xdc, 0xe2, 0x74, 0xfd, 0x32, 0x43, 0x10, 0x05, 0x91, 0x50, 0x5a, 0xc9, 0xc8, 0xc5,
        0xee, 0x5b, 0x9c, 0x1e, 0x9c, 0x9a, 0x97, 0x22, 0x24, 0xc9, 0xc5, 0x91, 0x9c, 0x93, 0x58, 0x5c,
        0x1c, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0xc4, 0x0e, 0xe6, 0x7b, 0xa6, 0x08,
        0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x81, 0x05, 0x99, 0x32, 0x53, 0x84, 0x0c, 0xb8, 0xd8,
        0x8a, 0x53, 0xf3, 0x52, 0x52, 0x8b, 0x24, 0x98, 0x41, 0x62, 0x4e, 0x12, 0x97, 0xb6, 0xe8, 0x8a,
        0x40, 0x6d, 0x74, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x0e, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x0f,
        0x82, 0xaa, 0x13, 0x32, 0xe1, 0xe2, 0x28, 0x4a, 0x4d, 0x4e, 0xcd, 0x2c, 0x4b, 0x2d, 0x92, 0x60,
        0x21, 0xa0, 0x07, 0xae, 0xd2, 0x8a, 0xbb, 0xe9, 0xf9, 0x06, 0x2d, 0xa8, 0x11, 0x4a, 0x82, 0x5c,
        0xfc, 0x50, 0xa7, 0x06, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x1a, 0x85, 0x71, 0x31, 0xfb,
        0x16, 0xa7, 0x0b, 0x79, 0x70, 0xb1, 0x80, 0x7d, 0x20, 0xad, 0x87, 0x19, 0x2c, 0x7a, 0x50, 0x3d,
        0x52, 0xca, 0x78, 0x24, 0x61, 0x06, 0x4a, 0xb1, 0x36, 0x3c, 0xdf, 0xa0, 0xc5, 0xe8, 0xa4, 0x73,
        0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7,
        0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xd0, 0x80, 0x2f, 0x4e, 0xc9, 0xd6,
        0xcb, 0xcc, 0xd7, 0xaf, 0x00, 0xc5, 0x4e, 0x12, 0x1b, 0x38, 0x2c, 0x8d, 0x01, 0x01, 0x00, 0x00,
        0xff, 0xff, 0x3f, 0x1d, 0xd6, 0x0c, 0xb2, 0x01, 0x00, 0x00];

    let mut gz = flate2::read::GzDecoder::new(bz);
    let mut res = vec![];
    res.reserve(0x10000);
    gz.read_to_end(&mut res).unwrap();
    let fd = FileDescriptorProto::decode(res.borrow()).unwrap();

    let mut ctx = Context::default();
    gen_file(&fd, &mut ctx).unwrap();
    let out_dir = env::var_os("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("out.rs");
    fs::write(&dest_path, ctx.str).unwrap();
    // println!("cargo:rerun-if-changed=build.rs");
    Ok(())
}