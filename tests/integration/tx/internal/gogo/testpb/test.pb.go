// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testpb/test.proto

package testpb

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccessType permission types
type AccessType int32

const (
	// AccessTypeUnspecified placeholder for empty value
	AccessTypeUnspecified AccessType = 0
	// AccessTypeNobody forbidden
	AccessTypeNobody AccessType = 1
	// AccessTypeEverybody unrestricted
	AccessTypeEverybody AccessType = 3
	// AccessTypeAnyOfAddresses allow any of the addresses
	AccessTypeAnyOfAddresses AccessType = 4
)

var AccessType_name = map[int32]string{
	0: "ACCESS_TYPE_UNSPECIFIED",
	1: "ACCESS_TYPE_NOBODY",
	3: "ACCESS_TYPE_EVERYBODY",
	4: "ACCESS_TYPE_ANY_OF_ADDRESSES",
}

var AccessType_value = map[string]int32{
	"ACCESS_TYPE_UNSPECIFIED":      0,
	"ACCESS_TYPE_NOBODY":           1,
	"ACCESS_TYPE_EVERYBODY":        3,
	"ACCESS_TYPE_ANY_OF_ADDRESSES": 4,
}

func (AccessType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{0}
}

type Streng struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Streng) Reset()         { *m = Streng{} }
func (m *Streng) String() string { return proto.CompactTextString(m) }
func (*Streng) ProtoMessage()    {}
func (*Streng) Descriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{0}
}
func (m *Streng) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Streng) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Streng.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Streng) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Streng.Merge(m, src)
}
func (m *Streng) XXX_Size() int {
	return m.Size()
}
func (m *Streng) XXX_DiscardUnknown() {
	xxx_messageInfo_Streng.DiscardUnknown(m)
}

var xxx_messageInfo_Streng proto.InternalMessageInfo

func (m *Streng) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TestRepeatedFields struct {
	NullableOmitempty []*Streng `protobuf:"bytes,1,rep,name=nullable_omitempty,json=nullableOmitempty,proto3" json:"nullable_omitempty,omitempty"`
	// not supported for empty sets
	// go-amino emits nothing but the protoreflect library emits a null
	NullableDontOmitempty []*Streng `protobuf:"bytes,2,rep,name=nullable_dont_omitempty,json=nullableDontOmitempty,proto3" json:"nullable_dont_omitempty,omitempty"`
	// not supported for empty sets
	// go-amino emits a null but the protoreflect library emits nothing
	NonNullableOmitempty     []Streng `protobuf:"bytes,3,rep,name=non_nullable_omitempty,json=nonNullableOmitempty,proto3" json:"non_nullable_omitempty"`
	NonNullableDontOmitempty []Streng `protobuf:"bytes,4,rep,name=non_nullable_dont_omitempty,json=nonNullableDontOmitempty,proto3" json:"non_nullable_dont_omitempty"`
}

func (m *TestRepeatedFields) Reset()         { *m = TestRepeatedFields{} }
func (m *TestRepeatedFields) String() string { return proto.CompactTextString(m) }
func (*TestRepeatedFields) ProtoMessage()    {}
func (*TestRepeatedFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{1}
}
func (m *TestRepeatedFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestRepeatedFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestRepeatedFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestRepeatedFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRepeatedFields.Merge(m, src)
}
func (m *TestRepeatedFields) XXX_Size() int {
	return m.Size()
}
func (m *TestRepeatedFields) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRepeatedFields.DiscardUnknown(m)
}

var xxx_messageInfo_TestRepeatedFields proto.InternalMessageInfo

func (m *TestRepeatedFields) GetNullableOmitempty() []*Streng {
	if m != nil {
		return m.NullableOmitempty
	}
	return nil
}

func (m *TestRepeatedFields) GetNullableDontOmitempty() []*Streng {
	if m != nil {
		return m.NullableDontOmitempty
	}
	return nil
}

func (m *TestRepeatedFields) GetNonNullableOmitempty() []Streng {
	if m != nil {
		return m.NonNullableOmitempty
	}
	return nil
}

func (m *TestRepeatedFields) GetNonNullableDontOmitempty() []Streng {
	if m != nil {
		return m.NonNullableDontOmitempty
	}
	return nil
}

type TestNullableFields struct {
	NullableOmitempty *Streng `protobuf:"bytes,1,opt,name=nullable_omitempty,json=nullableOmitempty,proto3" json:"nullable_omitempty,omitempty"`
	// not supported
	// go-amino emits nothing and the protoreflect returns an error
	// alternatively protoreflect could emit `{}`
	NullableDontOmitempty *Streng `protobuf:"bytes,2,opt,name=nullable_dont_omitempty,json=nullableDontOmitempty,proto3" json:"nullable_dont_omitempty,omitempty"`
	// not supported
	// go-amino emits `{}` but the protoreflect library emits nothing
	NonNullableOmitempty     Streng `protobuf:"bytes,3,opt,name=non_nullable_omitempty,json=nonNullableOmitempty,proto3" json:"non_nullable_omitempty"`
	NonNullableDontOmitempty Streng `protobuf:"bytes,4,opt,name=non_nullable_dont_omitempty,json=nonNullableDontOmitempty,proto3" json:"non_nullable_dont_omitempty"`
}

func (m *TestNullableFields) Reset()         { *m = TestNullableFields{} }
func (m *TestNullableFields) String() string { return proto.CompactTextString(m) }
func (*TestNullableFields) ProtoMessage()    {}
func (*TestNullableFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{2}
}
func (m *TestNullableFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestNullableFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestNullableFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestNullableFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestNullableFields.Merge(m, src)
}
func (m *TestNullableFields) XXX_Size() int {
	return m.Size()
}
func (m *TestNullableFields) XXX_DiscardUnknown() {
	xxx_messageInfo_TestNullableFields.DiscardUnknown(m)
}

var xxx_messageInfo_TestNullableFields proto.InternalMessageInfo

func (m *TestNullableFields) GetNullableOmitempty() *Streng {
	if m != nil {
		return m.NullableOmitempty
	}
	return nil
}

func (m *TestNullableFields) GetNullableDontOmitempty() *Streng {
	if m != nil {
		return m.NullableDontOmitempty
	}
	return nil
}

func (m *TestNullableFields) GetNonNullableOmitempty() Streng {
	if m != nil {
		return m.NonNullableOmitempty
	}
	return Streng{}
}

func (m *TestNullableFields) GetNonNullableDontOmitempty() Streng {
	if m != nil {
		return m.NonNullableDontOmitempty
	}
	return Streng{}
}

type IntAsString struct {
	IntAsString cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=int_as_string,json=intAsString,proto3,customtype=cosmossdk.io/math.Int" json:"int_as_string"`
}

func (m *IntAsString) Reset()         { *m = IntAsString{} }
func (m *IntAsString) String() string { return proto.CompactTextString(m) }
func (*IntAsString) ProtoMessage()    {}
func (*IntAsString) Descriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{3}
}
func (m *IntAsString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntAsString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntAsString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntAsString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntAsString.Merge(m, src)
}
func (m *IntAsString) XXX_Size() int {
	return m.Size()
}
func (m *IntAsString) XXX_DiscardUnknown() {
	xxx_messageInfo_IntAsString.DiscardUnknown(m)
}

var xxx_messageInfo_IntAsString proto.InternalMessageInfo

type IntAsBytes struct {
	IntAsBytes cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=int_as_bytes,json=intAsBytes,proto3,customtype=cosmossdk.io/math.Int" json:"int_as_bytes"`
}

func (m *IntAsBytes) Reset()         { *m = IntAsBytes{} }
func (m *IntAsBytes) String() string { return proto.CompactTextString(m) }
func (*IntAsBytes) ProtoMessage()    {}
func (*IntAsBytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{4}
}
func (m *IntAsBytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntAsBytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntAsBytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntAsBytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntAsBytes.Merge(m, src)
}
func (m *IntAsBytes) XXX_Size() int {
	return m.Size()
}
func (m *IntAsBytes) XXX_DiscardUnknown() {
	xxx_messageInfo_IntAsBytes.DiscardUnknown(m)
}

var xxx_messageInfo_IntAsBytes proto.InternalMessageInfo

// MsgStoreCode submit Wasm code to the system
type MsgStoreCode struct {
	// Sender is the actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// WASMByteCode can be raw or gzip compressed
	WASMByteCode []byte `protobuf:"bytes,2,opt,name=wasm_byte_code,json=wasmByteCode,proto3" json:"wasm_byte_code,omitempty"`
	// InstantiatePermission access control to apply on contract creation,
	// optional
	InstantiatePermission *AccessConfig `protobuf:"bytes,5,opt,name=instantiate_permission,json=instantiatePermission,proto3" json:"instantiate_permission,omitempty"`
}

func (m *MsgStoreCode) Reset()         { *m = MsgStoreCode{} }
func (m *MsgStoreCode) String() string { return proto.CompactTextString(m) }
func (*MsgStoreCode) ProtoMessage()    {}
func (*MsgStoreCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{5}
}
func (m *MsgStoreCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStoreCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStoreCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStoreCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStoreCode.Merge(m, src)
}
func (m *MsgStoreCode) XXX_Size() int {
	return m.Size()
}
func (m *MsgStoreCode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStoreCode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStoreCode proto.InternalMessageInfo

func (m *MsgStoreCode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgStoreCode) GetWASMByteCode() []byte {
	if m != nil {
		return m.WASMByteCode
	}
	return nil
}

func (m *MsgStoreCode) GetInstantiatePermission() *AccessConfig {
	if m != nil {
		return m.InstantiatePermission
	}
	return nil
}

// AccessConfig access control type.
type AccessConfig struct {
	Permission AccessType `protobuf:"varint,1,opt,name=permission,proto3,enum=testpb.AccessType" json:"permission,omitempty" yaml:"permission"`
	Addresses  []string   `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *AccessConfig) Reset()         { *m = AccessConfig{} }
func (m *AccessConfig) String() string { return proto.CompactTextString(m) }
func (*AccessConfig) ProtoMessage()    {}
func (*AccessConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_41c67e33ca9d1f26, []int{6}
}
func (m *AccessConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessConfig.Merge(m, src)
}
func (m *AccessConfig) XXX_Size() int {
	return m.Size()
}
func (m *AccessConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AccessConfig proto.InternalMessageInfo

func (m *AccessConfig) GetPermission() AccessType {
	if m != nil {
		return m.Permission
	}
	return AccessTypeUnspecified
}

func (m *AccessConfig) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func init() {
	proto.RegisterEnum("testpb.AccessType", AccessType_name, AccessType_value)
	proto.RegisterType((*Streng)(nil), "testpb.streng")
	proto.RegisterType((*TestRepeatedFields)(nil), "testpb.TestRepeatedFields")
	proto.RegisterType((*TestNullableFields)(nil), "testpb.TestNullableFields")
	proto.RegisterType((*IntAsString)(nil), "testpb.IntAsString")
	proto.RegisterType((*IntAsBytes)(nil), "testpb.IntAsBytes")
	proto.RegisterType((*MsgStoreCode)(nil), "testpb.MsgStoreCode")
	proto.RegisterType((*AccessConfig)(nil), "testpb.AccessConfig")
}

func init() { proto.RegisterFile("testpb/test.proto", fileDescriptor_41c67e33ca9d1f26) }

var fileDescriptor_41c67e33ca9d1f26 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x1b, 0xa7, 0x6a, 0x5f, 0x43, 0x95, 0x0c, 0xc9, 0x36, 0x6b, 0x56, 0x4e, 0xf0, 0x69,
	0x55, 0xb1, 0xc9, 0x52, 0xa4, 0x1e, 0x2a, 0x81, 0xe4, 0x24, 0xae, 0x94, 0xa2, 0x26, 0x95, 0x9d,
	0x05, 0x7a, 0x32, 0x4e, 0x3c, 0x35, 0x16, 0xf1, 0x4c, 0xe4, 0x99, 0x2d, 0xe4, 0x86, 0x38, 0xa1,
	0x9c, 0x38, 0x72, 0x89, 0x84, 0x04, 0x87, 0x3d, 0xf6, 0xb0, 0x7f, 0x44, 0x8f, 0xab, 0x3d, 0x21,
	0x0e, 0x15, 0x6a, 0x0f, 0xbd, 0x23, 0xc4, 0x19, 0xf9, 0x57, 0xed, 0xb2, 0xd1, 0xae, 0x54, 0xf5,
	0x62, 0xcf, 0x8f, 0xef, 0xfb, 0xde, 0xf7, 0xde, 0xf3, 0x78, 0xa0, 0xcc, 0x31, 0xe3, 0xd3, 0x51,
	0x2b, 0x78, 0x35, 0xa7, 0x3e, 0xe5, 0x14, 0xad, 0x46, 0x4b, 0xd2, 0xd6, 0x98, 0x32, 0x8f, 0xb2,
	0x96, 0xc7, 0x9c, 0xd6, 0xe9, 0xc7, 0xc1, 0x2b, 0x02, 0x48, 0x15, 0x87, 0x3a, 0x34, 0x1c, 0xb6,
	0x82, 0x51, 0xbc, 0x5a, 0xb6, 0x3c, 0x97, 0xd0, 0x56, 0xf8, 0x8c, 0x97, 0x1e, 0x46, 0x0a, 0x66,
	0x84, 0x8d, 0x26, 0xd1, 0x96, 0x22, 0xc3, 0x2a, 0xe3, 0x3e, 0x26, 0x0e, 0xaa, 0x40, 0xe1, 0xd4,
	0x9a, 0x3c, 0xc7, 0x35, 0xa1, 0x21, 0x3c, 0x5e, 0xd7, 0xa3, 0x89, 0x72, 0xbe, 0x02, 0x68, 0x88,
	0x19, 0xd7, 0xf1, 0x14, 0x5b, 0x1c, 0xdb, 0xfb, 0x2e, 0x9e, 0xd8, 0x0c, 0x7d, 0x0a, 0x88, 0x3c,
	0x9f, 0x4c, 0xac, 0xd1, 0x04, 0x9b, 0xd4, 0x73, 0x39, 0xf6, 0xa6, 0x7c, 0x56, 0x13, 0x1a, 0xf9,
	0xc7, 0x1b, 0x3b, 0x9b, 0xcd, 0xc8, 0x78, 0x33, 0x12, 0xd6, 0xcb, 0x09, 0x72, 0x90, 0x00, 0xd1,
	0x21, 0x6c, 0xdd, 0xd0, 0x6d, 0x4a, 0x78, 0x46, 0x63, 0x65, 0x99, 0x46, 0xbb, 0xf0, 0xe2, 0xfa,
	0x6c, 0x5b, 0xd0, 0xab, 0x09, 0xab, 0x4b, 0x09, 0x4f, 0xe5, 0x0e, 0xe0, 0x01, 0xa1, 0xc4, 0x5c,
	0xe2, 0x28, 0xbf, 0x54, 0x4d, 0x3c, 0xbf, 0xa8, 0xe7, 0xf4, 0x0a, 0xa1, 0xa4, 0xff, 0x86, 0xb5,
	0xaf, 0xe0, 0x83, 0x5b, 0x5a, 0xff, 0xb3, 0x27, 0x2e, 0x15, 0x5c, 0x0f, 0x04, 0x23, 0x8b, 0xb5,
	0x8c, 0xea, 0x2d, 0x97, 0x37, 0xa5, 0x4c, 0x76, 0xdf, 0x51, 0x4a, 0xe1, 0x1e, 0x4a, 0x29, 0xdc,
	0x6b, 0x29, 0x85, 0xfb, 0x2e, 0xa5, 0x70, 0xd7, 0x52, 0x8e, 0x61, 0xa3, 0x47, 0xb8, 0xca, 0x0c,
	0xee, 0xbb, 0xc4, 0x41, 0x43, 0x78, 0xcf, 0x25, 0xdc, 0xb4, 0x98, 0xc9, 0xc2, 0x85, 0xe8, 0x13,
	0x6e, 0x3f, 0x0d, 0xa4, 0xfe, 0xbc, 0xa8, 0x57, 0xa3, 0x2f, 0x9e, 0xd9, 0xdf, 0x36, 0x5d, 0xda,
	0xf2, 0x2c, 0xfe, 0x4d, 0xb3, 0x47, 0xf8, 0xeb, 0x97, 0x4f, 0x20, 0x3e, 0x0a, 0x3d, 0xc2, 0xa3,
	0x88, 0x1b, 0x6e, 0xaa, 0xaa, 0x7c, 0x0d, 0x10, 0x06, 0x69, 0xcf, 0x38, 0x66, 0x48, 0x87, 0x62,
	0x1c, 0x63, 0x14, 0xcc, 0xc3, 0x10, 0xc5, 0x3b, 0x84, 0x00, 0xf7, 0x46, 0x53, 0xf9, 0x47, 0x80,
	0xe2, 0x21, 0x73, 0x0c, 0x4e, 0x7d, 0xdc, 0xa1, 0x36, 0x46, 0x4f, 0x61, 0x95, 0x61, 0x62, 0x63,
	0x3f, 0xce, 0xa0, 0xf6, 0xfa, 0xe5, 0x93, 0x4a, 0xac, 0xa0, 0xda, 0xb6, 0x8f, 0x59, 0x6c, 0x4e,
	0x8f, 0x71, 0x68, 0x17, 0x36, 0xbf, 0xb3, 0x98, 0x17, 0x9a, 0x32, 0xc7, 0xd4, 0xc6, 0x61, 0xd7,
	0x8b, 0xed, 0xd2, 0xe5, 0x45, 0xbd, 0xf8, 0xa5, 0x6a, 0x1c, 0x06, 0x91, 0x02, 0x6d, 0xbd, 0x18,
	0xe0, 0x92, 0x19, 0xfa, 0x1c, 0x1e, 0xb8, 0x84, 0x71, 0x8b, 0x70, 0xd7, 0xe2, 0xd8, 0x9c, 0x62,
	0xdf, 0x73, 0x19, 0x73, 0x29, 0xa9, 0x15, 0xc2, 0xb6, 0x54, 0x92, 0xb6, 0xa8, 0xe3, 0x31, 0x66,
	0xac, 0x43, 0xc9, 0x89, 0xeb, 0xe8, 0xd5, 0x0c, 0xe7, 0xe8, 0x86, 0xb2, 0xf7, 0xe1, 0x8f, 0xd7,
	0x67, 0xdb, 0xb1, 0xa3, 0xf9, 0xf5, 0xd9, 0x76, 0x39, 0x08, 0xd5, 0xca, 0x66, 0x76, 0x20, 0xae,
	0xe5, 0x4b, 0xe2, 0x81, 0xb8, 0x26, 0x96, 0x0a, 0xca, 0x42, 0x80, 0x62, 0x56, 0x16, 0xf5, 0x00,
	0x32, 0x06, 0x82, 0xd4, 0x37, 0x77, 0xd0, 0x6d, 0x03, 0xc3, 0xd9, 0x14, 0xb7, 0xab, 0x7f, 0x5f,
	0xd4, 0xcb, 0x33, 0xcb, 0x9b, 0xec, 0x29, 0x29, 0x5e, 0xd1, 0x33, 0x64, 0xb4, 0x0b, 0xeb, 0x56,
	0x54, 0x28, 0xcc, 0xc2, 0xd3, 0xff, 0xb6, 0x22, 0xa6, 0xd0, 0x3d, 0xf1, 0x97, 0x5f, 0xeb, 0xc2,
	0x81, 0xb8, 0xb6, 0x52, 0xca, 0x6f, 0xff, 0x2b, 0x00, 0xa4, 0x51, 0xd1, 0x2e, 0x6c, 0xa9, 0x9d,
	0x8e, 0x66, 0x18, 0xe6, 0xf0, 0xf8, 0x48, 0x33, 0x9f, 0xf5, 0x8d, 0x23, 0xad, 0xd3, 0xdb, 0xef,
	0x69, 0xdd, 0x52, 0x4e, 0x7a, 0x38, 0x5f, 0x34, 0xaa, 0x29, 0xf8, 0x19, 0x61, 0x53, 0x3c, 0x76,
	0x4f, 0x5c, 0x6c, 0xa3, 0x8f, 0x00, 0x65, 0x79, 0xfd, 0x41, 0x7b, 0xd0, 0x3d, 0x2e, 0x09, 0x52,
	0x65, 0xbe, 0x68, 0x94, 0x52, 0x4a, 0x9f, 0x8e, 0xa8, 0x3d, 0x43, 0x3b, 0x50, 0xcd, 0xa2, 0xb5,
	0x2f, 0x34, 0xfd, 0x38, 0x24, 0xe4, 0xa5, 0xad, 0xf9, 0xa2, 0xf1, 0x7e, 0x4a, 0xd0, 0x4e, 0xb1,
	0x3f, 0x0b, 0x39, 0x9f, 0xc1, 0xa3, 0x2c, 0x47, 0xed, 0x1f, 0x9b, 0x83, 0x7d, 0x53, 0xed, 0x76,
	0x75, 0xcd, 0x30, 0x34, 0xa3, 0x24, 0x4a, 0x8f, 0xe6, 0x8b, 0x46, 0x2d, 0xa5, 0xaa, 0x64, 0x36,
	0x38, 0x51, 0x93, 0xa4, 0xa5, 0xb5, 0x9f, 0x7e, 0x93, 0x73, 0x2f, 0x7e, 0x97, 0x73, 0x4a, 0x90,
	0xf8, 0xca, 0x0e, 0x86, 0x4a, 0x8f, 0x70, 0xec, 0xf8, 0x16, 0x77, 0x29, 0x19, 0x7e, 0x1f, 0xfc,
	0xad, 0x0e, 0x99, 0x83, 0xf6, 0x01, 0x82, 0x61, 0xfc, 0xc3, 0x92, 0x92, 0xce, 0xbc, 0x79, 0x2f,
	0x48, 0x6f, 0xd9, 0x53, 0x72, 0x52, 0xe1, 0x87, 0xe0, 0x08, 0xb4, 0x6b, 0xe7, 0x97, 0xb2, 0xf0,
	0xea, 0x52, 0x16, 0xfe, 0xba, 0x94, 0x85, 0x9f, 0xaf, 0xe4, 0xdc, 0xab, 0x2b, 0x39, 0xf7, 0xc7,
	0x95, 0x9c, 0x1b, 0xad, 0x86, 0x97, 0xd2, 0x27, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xab,
	0x29, 0x95, 0x0e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IntegrationTxTestMsgClient is the client API for IntegrationTxTestMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntegrationTxTestMsgClient interface {
	TestFields(ctx context.Context, in *TestRepeatedFields, opts ...grpc.CallOption) (*TestRepeatedFields, error)
}

type integrationTxTestMsgClient struct {
	cc grpc1.ClientConn
}

func NewIntegrationTxTestMsgClient(cc grpc1.ClientConn) IntegrationTxTestMsgClient {
	return &integrationTxTestMsgClient{cc}
}

func (c *integrationTxTestMsgClient) TestFields(ctx context.Context, in *TestRepeatedFields, opts ...grpc.CallOption) (*TestRepeatedFields, error) {
	out := new(TestRepeatedFields)
	err := c.cc.Invoke(ctx, "/testpb.IntegrationTxTestMsg/TestFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationTxTestMsgServer is the server API for IntegrationTxTestMsg service.
type IntegrationTxTestMsgServer interface {
	TestFields(context.Context, *TestRepeatedFields) (*TestRepeatedFields, error)
}

// UnimplementedIntegrationTxTestMsgServer can be embedded to have forward compatible implementations.
type UnimplementedIntegrationTxTestMsgServer struct {
}

func (*UnimplementedIntegrationTxTestMsgServer) TestFields(ctx context.Context, req *TestRepeatedFields) (*TestRepeatedFields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestFields not implemented")
}

func RegisterIntegrationTxTestMsgServer(s grpc1.Server, srv IntegrationTxTestMsgServer) {
	s.RegisterService(&_IntegrationTxTestMsg_serviceDesc, srv)
}

func _IntegrationTxTestMsg_TestFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRepeatedFields)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationTxTestMsgServer).TestFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testpb.IntegrationTxTestMsg/TestFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationTxTestMsgServer).TestFields(ctx, req.(*TestRepeatedFields))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntegrationTxTestMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testpb.IntegrationTxTestMsg",
	HandlerType: (*IntegrationTxTestMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestFields",
			Handler:    _IntegrationTxTestMsg_TestFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testpb/test.proto",
}

func (m *Streng) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Streng) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Streng) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestRepeatedFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestRepeatedFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestRepeatedFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NonNullableDontOmitempty) > 0 {
		for iNdEx := len(m.NonNullableDontOmitempty) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonNullableDontOmitempty[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NonNullableOmitempty) > 0 {
		for iNdEx := len(m.NonNullableOmitempty) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonNullableOmitempty[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NullableDontOmitempty) > 0 {
		for iNdEx := len(m.NullableDontOmitempty) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NullableDontOmitempty[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NullableOmitempty) > 0 {
		for iNdEx := len(m.NullableOmitempty) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NullableOmitempty[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestNullableFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestNullableFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestNullableFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NonNullableDontOmitempty.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.NonNullableOmitempty.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.NullableDontOmitempty != nil {
		{
			size, err := m.NullableDontOmitempty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NullableOmitempty != nil {
		{
			size, err := m.NullableOmitempty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IntAsString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntAsString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntAsString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.IntAsString.Size()
		i -= size
		if _, err := m.IntAsString.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IntAsBytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntAsBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntAsBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.IntAsBytes.Size()
		i -= size
		if _, err := m.IntAsBytes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgStoreCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStoreCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStoreCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InstantiatePermission != nil {
		{
			size, err := m.InstantiatePermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WASMByteCode) > 0 {
		i -= len(m.WASMByteCode)
		copy(dAtA[i:], m.WASMByteCode)
		i = encodeVarintTest(dAtA, i, uint64(len(m.WASMByteCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccessConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Permission != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Streng) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *TestRepeatedFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NullableOmitempty) > 0 {
		for _, e := range m.NullableOmitempty {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.NullableDontOmitempty) > 0 {
		for _, e := range m.NullableDontOmitempty {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.NonNullableOmitempty) > 0 {
		for _, e := range m.NonNullableOmitempty {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.NonNullableDontOmitempty) > 0 {
		for _, e := range m.NonNullableDontOmitempty {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	return n
}

func (m *TestNullableFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NullableOmitempty != nil {
		l = m.NullableOmitempty.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.NullableDontOmitempty != nil {
		l = m.NullableDontOmitempty.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	l = m.NonNullableOmitempty.Size()
	n += 1 + l + sovTest(uint64(l))
	l = m.NonNullableDontOmitempty.Size()
	n += 1 + l + sovTest(uint64(l))
	return n
}

func (m *IntAsString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IntAsString.Size()
	n += 1 + l + sovTest(uint64(l))
	return n
}

func (m *IntAsBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IntAsBytes.Size()
	n += 1 + l + sovTest(uint64(l))
	return n
}

func (m *MsgStoreCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.WASMByteCode)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.InstantiatePermission != nil {
		l = m.InstantiatePermission.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *AccessConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permission != 0 {
		n += 1 + sovTest(uint64(m.Permission))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Streng) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: streng: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: streng: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestRepeatedFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestRepeatedFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestRepeatedFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullableOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NullableOmitempty = append(m.NullableOmitempty, &Streng{})
			if err := m.NullableOmitempty[len(m.NullableOmitempty)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullableDontOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NullableDontOmitempty = append(m.NullableDontOmitempty, &Streng{})
			if err := m.NullableDontOmitempty[len(m.NullableDontOmitempty)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonNullableOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonNullableOmitempty = append(m.NonNullableOmitempty, Streng{})
			if err := m.NonNullableOmitempty[len(m.NonNullableOmitempty)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonNullableDontOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonNullableDontOmitempty = append(m.NonNullableDontOmitempty, Streng{})
			if err := m.NonNullableDontOmitempty[len(m.NonNullableDontOmitempty)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestNullableFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestNullableFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestNullableFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullableOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NullableOmitempty == nil {
				m.NullableOmitempty = &Streng{}
			}
			if err := m.NullableOmitempty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullableDontOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NullableDontOmitempty == nil {
				m.NullableDontOmitempty = &Streng{}
			}
			if err := m.NullableDontOmitempty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonNullableOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NonNullableOmitempty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonNullableDontOmitempty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NonNullableDontOmitempty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntAsString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntAsString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntAsString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntAsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IntAsString.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntAsBytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntAsBytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntAsBytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntAsBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IntAsBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStoreCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStoreCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStoreCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WASMByteCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WASMByteCode = append(m.WASMByteCode[:0], dAtA[iNdEx:postIndex]...)
			if m.WASMByteCode == nil {
				m.WASMByteCode = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiatePermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantiatePermission == nil {
				m.InstantiatePermission = &AccessConfig{}
			}
			if err := m.InstantiatePermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= AccessType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
