// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/orm/v1alpha1/schema.proto

package ormv1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StorageType
type StorageType int32

const (
	// STORAGE_TYPE_DEFAULT_UNSPECIFIED indicates the persistent storage where all
	// data is stored in the regular Merkle-tree backed KV-store.
	StorageType_STORAGE_TYPE_DEFAULT_UNSPECIFIED StorageType = 0
	// STORAGE_TYPE_MEMORY indicates in-memory storage that will be
	// reloaded every time an app restarts. Tables with this type of storage
	// will by default be ignored when importing and exporting a module's
	// state from JSON.
	StorageType_STORAGE_TYPE_MEMORY StorageType = 1
	// STORAGE_TYPE_TRANSIENT indicates transient storage that is reset
	// at the end of every block. Tables with this type of storage
	// will by default be ignored when importing and exporting a module's
	// state from JSON.
	StorageType_STORAGE_TYPE_TRANSIENT StorageType = 2
)

var StorageType_name = map[int32]string{
	0: "STORAGE_TYPE_DEFAULT_UNSPECIFIED",
	1: "STORAGE_TYPE_MEMORY",
	2: "STORAGE_TYPE_TRANSIENT",
}

var StorageType_value = map[string]int32{
	"STORAGE_TYPE_DEFAULT_UNSPECIFIED": 0,
	"STORAGE_TYPE_MEMORY":              1,
	"STORAGE_TYPE_TRANSIENT":           2,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}

func (StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c1a84cca236c22, []int{0}
}

// ModuleSchemaDescriptor describe's a module's ORM schema.
type ModuleSchemaDescriptor struct {
	SchemaFile []*ModuleSchemaDescriptor_FileEntry `protobuf:"bytes,1,rep,name=schema_file,json=schemaFile,proto3" json:"schema_file,omitempty"`
	// prefix is an optional prefix that precedes all keys in this module's
	// store.
	Prefix []byte `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *ModuleSchemaDescriptor) Reset()         { *m = ModuleSchemaDescriptor{} }
func (m *ModuleSchemaDescriptor) String() string { return proto.CompactTextString(m) }
func (*ModuleSchemaDescriptor) ProtoMessage()    {}
func (*ModuleSchemaDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c1a84cca236c22, []int{0}
}
func (m *ModuleSchemaDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleSchemaDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleSchemaDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleSchemaDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleSchemaDescriptor.Merge(m, src)
}
func (m *ModuleSchemaDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *ModuleSchemaDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleSchemaDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleSchemaDescriptor proto.InternalMessageInfo

func (m *ModuleSchemaDescriptor) GetSchemaFile() []*ModuleSchemaDescriptor_FileEntry {
	if m != nil {
		return m.SchemaFile
	}
	return nil
}

func (m *ModuleSchemaDescriptor) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

// FileEntry describes an ORM file used in a module.
type ModuleSchemaDescriptor_FileEntry struct {
	// id is a prefix that will be varint encoded and prepended to all the
	// table keys specified in the file's tables.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// proto_file_name is the name of a file .proto in that contains
	// table definitions. The .proto file must be in a package that the
	// module has referenced using cosmos.app.v1.ModuleDescriptor.use_package.
	ProtoFileName string `protobuf:"bytes,2,opt,name=proto_file_name,json=protoFileName,proto3" json:"proto_file_name,omitempty"`
	// storage_type optionally indicates the type of storage this file's
	// tables should used. If it is left unspecified, the default KV-storage
	// of the app will be used.
	StorageType StorageType `protobuf:"varint,3,opt,name=storage_type,json=storageType,proto3,enum=cosmos.orm.v1alpha1.StorageType" json:"storage_type,omitempty"`
}

func (m *ModuleSchemaDescriptor_FileEntry) Reset()         { *m = ModuleSchemaDescriptor_FileEntry{} }
func (m *ModuleSchemaDescriptor_FileEntry) String() string { return proto.CompactTextString(m) }
func (*ModuleSchemaDescriptor_FileEntry) ProtoMessage()    {}
func (*ModuleSchemaDescriptor_FileEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c1a84cca236c22, []int{0, 0}
}
func (m *ModuleSchemaDescriptor_FileEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleSchemaDescriptor_FileEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleSchemaDescriptor_FileEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleSchemaDescriptor_FileEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleSchemaDescriptor_FileEntry.Merge(m, src)
}
func (m *ModuleSchemaDescriptor_FileEntry) XXX_Size() int {
	return m.Size()
}
func (m *ModuleSchemaDescriptor_FileEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleSchemaDescriptor_FileEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleSchemaDescriptor_FileEntry proto.InternalMessageInfo

func (m *ModuleSchemaDescriptor_FileEntry) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModuleSchemaDescriptor_FileEntry) GetProtoFileName() string {
	if m != nil {
		return m.ProtoFileName
	}
	return ""
}

func (m *ModuleSchemaDescriptor_FileEntry) GetStorageType() StorageType {
	if m != nil {
		return m.StorageType
	}
	return StorageType_STORAGE_TYPE_DEFAULT_UNSPECIFIED
}

var E_ModuleSchema = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MessageOptions)(nil),
	ExtensionType: (*ModuleSchemaDescriptor)(nil),
	Field:         104503792,
	Name:          "cosmos.orm.v1alpha1.module_schema",
	Tag:           "bytes,104503792,opt,name=module_schema",
	Filename:      "cosmos/orm/v1alpha1/schema.proto",
}

func init() {
	proto.RegisterEnum("cosmos.orm.v1alpha1.StorageType", StorageType_name, StorageType_value)
	proto.RegisterType((*ModuleSchemaDescriptor)(nil), "cosmos.orm.v1alpha1.ModuleSchemaDescriptor")
	proto.RegisterType((*ModuleSchemaDescriptor_FileEntry)(nil), "cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry")
	proto.RegisterExtension(E_ModuleSchema)
}

func init() { proto.RegisterFile("cosmos/orm/v1alpha1/schema.proto", fileDescriptor_b5c1a84cca236c22) }

var fileDescriptor_b5c1a84cca236c22 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x3b, 0x59, 0x58, 0xd8, 0x49, 0xbb, 0x96, 0x29, 0x76, 0x4b, 0x0f, 0xd9, 0x20, 0x22,
	0x45, 0x61, 0x62, 0x2b, 0x5e, 0xea, 0xa9, 0x7f, 0xd2, 0xa5, 0x60, 0x9b, 0x92, 0x66, 0x17, 0x57,
	0x0a, 0x61, 0xb6, 0x99, 0xb6, 0xc1, 0x4e, 0x27, 0xcc, 0x64, 0xc5, 0x7e, 0x03, 0x8f, 0x82, 0xdf,
	0xc0, 0xa3, 0x57, 0xbf, 0x84, 0x78, 0xda, 0xa3, 0x27, 0x91, 0xf6, 0xb6, 0x27, 0x3f, 0x82, 0x34,
	0xb3, 0x59, 0x77, 0x21, 0x17, 0x6f, 0x99, 0xe7, 0xfd, 0x3d, 0xcf, 0xfb, 0xf2, 0xbe, 0x81, 0xe6,
	0x94, 0x4b, 0xc6, 0xa5, 0xc5, 0x05, 0xb3, 0xde, 0xd7, 0xc9, 0x32, 0x5a, 0x90, 0xba, 0x25, 0xa7,
	0x0b, 0xca, 0x08, 0x8e, 0x04, 0x8f, 0x39, 0x2a, 0x29, 0x02, 0x73, 0xc1, 0x70, 0x4a, 0x54, 0xcd,
	0x39, 0xe7, 0xf3, 0x25, 0xb5, 0x12, 0xe4, 0xe2, 0x72, 0x66, 0x05, 0x54, 0x4e, 0x45, 0x18, 0xc5,
	0x5c, 0x28, 0xdb, 0xa3, 0xcf, 0x1a, 0x2c, 0x0f, 0x78, 0x70, 0xb9, 0xa4, 0xe3, 0x24, 0xad, 0x7b,
	0x0b, 0xa0, 0x33, 0xa8, 0xab, 0x0e, 0xfe, 0x2c, 0x5c, 0xd2, 0x0a, 0x30, 0xf7, 0x6a, 0x7a, 0xe3,
	0x25, 0xce, 0xe8, 0x83, 0xb3, 0x13, 0x70, 0x2f, 0x5c, 0x52, 0x7b, 0x15, 0x8b, 0xb5, 0x0b, 0x55,
	0xd2, 0x4e, 0x40, 0x65, 0xb8, 0x1f, 0x09, 0x3a, 0x0b, 0x3f, 0x54, 0x34, 0x13, 0xd4, 0xf2, 0xee,
	0xcd, 0xab, 0xfa, 0x11, 0xc0, 0x83, 0x5b, 0x07, 0x3a, 0x84, 0x5a, 0x18, 0x54, 0x80, 0x09, 0x6a,
	0x05, 0x57, 0x0b, 0x03, 0xf4, 0x04, 0x3e, 0x48, 0x26, 0x4e, 0x86, 0xf1, 0x57, 0x84, 0xd1, 0xc4,
	0x7e, 0xe0, 0x16, 0x12, 0x79, 0x67, 0x1c, 0x12, 0x46, 0x51, 0x07, 0xe6, 0x65, 0xcc, 0x05, 0x99,
	0x53, 0x3f, 0x5e, 0x47, 0xb4, 0xb2, 0x67, 0x82, 0xda, 0x61, 0xc3, 0xcc, 0x1c, 0x7b, 0xac, 0x40,
	0x6f, 0x1d, 0x51, 0x57, 0x97, 0xff, 0x1e, 0x4f, 0x17, 0x50, 0xbf, 0x53, 0x43, 0x8f, 0xa1, 0x39,
	0xf6, 0x1c, 0xb7, 0x75, 0x62, 0xfb, 0xde, 0xf9, 0xc8, 0xf6, 0xbb, 0x76, 0xaf, 0x75, 0xfa, 0xda,
	0xf3, 0x4f, 0x87, 0xe3, 0x91, 0xdd, 0xe9, 0xf7, 0xfa, 0x76, 0xb7, 0x98, 0x43, 0x47, 0xb0, 0x74,
	0x8f, 0x1a, 0xd8, 0x03, 0xc7, 0x3d, 0x2f, 0x02, 0x54, 0x85, 0xe5, 0x7b, 0x05, 0xcf, 0x6d, 0x0d,
	0xc7, 0x7d, 0x7b, 0xe8, 0x15, 0xb5, 0x66, 0x0c, 0x0b, 0x2c, 0x59, 0x9e, 0xaf, 0x36, 0x84, 0x8e,
	0xb1, 0xba, 0x19, 0x4e, 0x6f, 0x86, 0x07, 0x54, 0x4a, 0x32, 0xa7, 0x4e, 0x14, 0x87, 0x7c, 0x25,
	0x2b, 0x7f, 0xbe, 0x5d, 0xd7, 0x4d, 0x50, 0xd3, 0x1b, 0xcf, 0xfe, 0xe3, 0x14, 0x6e, 0x9e, 0xdd,
	0xd1, 0xdb, 0xbf, 0xc0, 0xf7, 0x8d, 0x01, 0xae, 0x36, 0x06, 0xf8, 0xbd, 0x31, 0xc0, 0xa7, 0xad,
	0x91, 0xbb, 0xda, 0x1a, 0xb9, 0x9f, 0x5b, 0x23, 0x07, 0x8f, 0xa6, 0x9c, 0x65, 0x05, 0xb7, 0x75,
	0xe5, 0x1d, 0xed, 0xc6, 0x1a, 0x81, 0xb7, 0xcf, 0x15, 0x23, 0x83, 0x77, 0x38, 0xe4, 0x16, 0x89,
	0x42, 0x2b, 0xe3, 0x17, 0x7d, 0xc5, 0x05, 0x4b, 0xbf, 0xbf, 0x68, 0x7b, 0x1d, 0xe7, 0xcd, 0x57,
	0xad, 0xd4, 0x51, 0xe1, 0x8e, 0x60, 0xf8, 0xec, 0xa6, 0xf6, 0x23, 0x55, 0x27, 0x8e, 0x60, 0x93,
	0x54, 0xdd, 0x68, 0xc7, 0x19, 0xea, 0xe4, 0x64, 0xd4, 0x1e, 0xd0, 0x98, 0x04, 0x24, 0x26, 0xd7,
	0xda, 0x43, 0x45, 0x34, 0x9b, 0x8e, 0x60, 0xcd, 0x66, 0xca, 0x5c, 0xec, 0x27, 0xdb, 0x7b, 0xf1,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xef, 0x0a, 0x18, 0xfe, 0x38, 0x03, 0x00, 0x00,
}

func (m *ModuleSchemaDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleSchemaDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleSchemaDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaFile) > 0 {
		for iNdEx := len(m.SchemaFile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaFile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleSchemaDescriptor_FileEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleSchemaDescriptor_FileEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleSchemaDescriptor_FileEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageType != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.StorageType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProtoFileName) > 0 {
		i -= len(m.ProtoFileName)
		copy(dAtA[i:], m.ProtoFileName)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.ProtoFileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ModuleSchemaDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaFile) > 0 {
		for _, e := range m.SchemaFile {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}

func (m *ModuleSchemaDescriptor_FileEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchema(uint64(m.Id))
	}
	l = len(m.ProtoFileName)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if m.StorageType != 0 {
		n += 1 + sovSchema(uint64(m.StorageType))
	}
	return n
}

func sovSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchema(x uint64) (n int) {
	return sovSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModuleSchemaDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleSchemaDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleSchemaDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaFile = append(m.SchemaFile, &ModuleSchemaDescriptor_FileEntry{})
			if err := m.SchemaFile[len(m.SchemaFile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleSchemaDescriptor_FileEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtoFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageType", wireType)
			}
			m.StorageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageType |= StorageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchema = fmt.Errorf("proto: unexpected end of group")
)
