// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/app/runtime/v1alpha1/module.proto

package runtimev1alpha1

import (
	_ "cosmossdk.io/api/cosmos/app/v1alpha1"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Module is the config object for the runtime module.
type Module struct {
	// app_name is the name of the app.
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// begin_blockers specifies the module names of begin blockers
	// to call in the order in which they should be called. If this is left empty
	// no begin blocker will be registered.
	BeginBlockers []string `protobuf:"bytes,2,rep,name=begin_blockers,json=beginBlockers,proto3" json:"begin_blockers,omitempty"`
	// end_blockers specifies the module names of the end blockers
	// to call in the order in which they should be called. If this is left empty
	// no end blocker will be registered.
	EndBlockers []string `protobuf:"bytes,3,rep,name=end_blockers,json=endBlockers,proto3" json:"end_blockers,omitempty"`
	// init_genesis specifies the module names of init genesis functions
	// to call in the order in which they should be called. If this is left empty
	// no init genesis function will be registered.
	InitGenesis []string `protobuf:"bytes,4,rep,name=init_genesis,json=initGenesis,proto3" json:"init_genesis,omitempty"`
	// export_genesis specifies the order in which to export module genesis data.
	// If this is left empty, the init_genesis order will be used for export genesis
	// if it is specified.
	ExportGenesis []string `protobuf:"bytes,5,rep,name=export_genesis,json=exportGenesis,proto3" json:"export_genesis,omitempty"`
	// override_store_keys is an optional list of overrides for the module store keys
	// to be used in keeper construction.
	OverrideStoreKeys []*StoreKeyConfig `protobuf:"bytes,6,rep,name=override_store_keys,json=overrideStoreKeys,proto3" json:"override_store_keys,omitempty"`
	// order_migrations defines the order in which module migrations are performed.
	// If this is left empty, it uses the default migration order.
	// https://pkg.go.dev/github.com/cosmos/cosmos-sdk@v0.47.0-alpha2/types/module#DefaultMigrationsOrder
	OrderMigrations []string `protobuf:"bytes,7,rep,name=order_migrations,json=orderMigrations,proto3" json:"order_migrations,omitempty"`
	// precommiters specifies the module names of the precommiters
	// to call in the order in which they should be called. If this is left empty
	// no precommit function will be registered.
	Precommiters []string `protobuf:"bytes,8,rep,name=precommiters,proto3" json:"precommiters,omitempty"`
	// prepare_check_staters specifies the module names of the prepare_check_staters
	// to call in the order in which they should be called. If this is left empty
	// no preparecheckstate function will be registered.
	PrepareCheckStaters []string `protobuf:"bytes,9,rep,name=prepare_check_staters,json=prepareCheckStaters,proto3" json:"prepare_check_staters,omitempty"`
	// pre_blockers specifies the module names of pre blockers
	// to call in the order in which they should be called. If this is left empty
	// no pre blocker will be registered.
	PreBlockers []string `protobuf:"bytes,10,rep,name=pre_blockers,json=preBlockers,proto3" json:"pre_blockers,omitempty"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_06ac623b0b8374f5, []int{0}
}
func (m *Module) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Module.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(m, src)
}
func (m *Module) XXX_Size() int {
	return m.Size()
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

func (m *Module) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *Module) GetBeginBlockers() []string {
	if m != nil {
		return m.BeginBlockers
	}
	return nil
}

func (m *Module) GetEndBlockers() []string {
	if m != nil {
		return m.EndBlockers
	}
	return nil
}

func (m *Module) GetInitGenesis() []string {
	if m != nil {
		return m.InitGenesis
	}
	return nil
}

func (m *Module) GetExportGenesis() []string {
	if m != nil {
		return m.ExportGenesis
	}
	return nil
}

func (m *Module) GetOverrideStoreKeys() []*StoreKeyConfig {
	if m != nil {
		return m.OverrideStoreKeys
	}
	return nil
}

func (m *Module) GetOrderMigrations() []string {
	if m != nil {
		return m.OrderMigrations
	}
	return nil
}

func (m *Module) GetPrecommiters() []string {
	if m != nil {
		return m.Precommiters
	}
	return nil
}

func (m *Module) GetPrepareCheckStaters() []string {
	if m != nil {
		return m.PrepareCheckStaters
	}
	return nil
}

func (m *Module) GetPreBlockers() []string {
	if m != nil {
		return m.PreBlockers
	}
	return nil
}

// StoreKeyConfig may be supplied to override the default module store key, which
// is the module name.
type StoreKeyConfig struct {
	// name of the module to override the store key of
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// the kv store key to use instead of the module name.
	KvStoreKey string `protobuf:"bytes,2,opt,name=kv_store_key,json=kvStoreKey,proto3" json:"kv_store_key,omitempty"`
}

func (m *StoreKeyConfig) Reset()         { *m = StoreKeyConfig{} }
func (m *StoreKeyConfig) String() string { return proto.CompactTextString(m) }
func (*StoreKeyConfig) ProtoMessage()    {}
func (*StoreKeyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_06ac623b0b8374f5, []int{1}
}
func (m *StoreKeyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreKeyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreKeyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreKeyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreKeyConfig.Merge(m, src)
}
func (m *StoreKeyConfig) XXX_Size() int {
	return m.Size()
}
func (m *StoreKeyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreKeyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StoreKeyConfig proto.InternalMessageInfo

func (m *StoreKeyConfig) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *StoreKeyConfig) GetKvStoreKey() string {
	if m != nil {
		return m.KvStoreKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Module)(nil), "cosmos.app.runtime.v1alpha1.Module")
	proto.RegisterType((*StoreKeyConfig)(nil), "cosmos.app.runtime.v1alpha1.StoreKeyConfig")
}

func init() {
	proto.RegisterFile("cosmos/app/runtime/v1alpha1/module.proto", fileDescriptor_06ac623b0b8374f5)
}

var fileDescriptor_06ac623b0b8374f5 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x8b, 0xd3, 0x4e,
	0x18, 0xc7, 0x37, 0xe9, 0xef, 0xb7, 0x7f, 0xa6, 0x75, 0xd5, 0x94, 0x85, 0xe8, 0x42, 0xb6, 0x16,
	0xc5, 0x8a, 0x98, 0xb0, 0xeb, 0x2d, 0xea, 0xa1, 0xed, 0x61, 0x0f, 0x52, 0x29, 0x2d, 0x78, 0xd0,
	0x42, 0x98, 0x26, 0x8f, 0xed, 0x90, 0x26, 0xf3, 0x30, 0x93, 0x16, 0xf7, 0x5d, 0x08, 0x82, 0x2f,
	0xc0, 0xa3, 0x2f, 0xc1, 0x93, 0x47, 0xf1, 0xb4, 0x47, 0xf1, 0x24, 0xed, 0xcd, 0x37, 0xa1, 0x24,
	0x93, 0xb1, 0x5d, 0x90, 0x9e, 0x4a, 0xbf, 0xdf, 0x4f, 0x9e, 0x27, 0xf9, 0xce, 0x77, 0x48, 0x2b,
	0xe4, 0x32, 0xe1, 0xd2, 0xa3, 0x88, 0x9e, 0x98, 0xa7, 0x19, 0x4b, 0xc0, 0x5b, 0x9c, 0xd2, 0x19,
	0x4e, 0xe9, 0xa9, 0x97, 0xf0, 0x68, 0x3e, 0x03, 0x17, 0x05, 0xcf, 0xb8, 0x75, 0xac, 0x48, 0x97,
	0x22, 0xba, 0x25, 0xe9, 0x6a, 0xf2, 0x76, 0x63, 0x63, 0xcc, 0x3f, 0x1f, 0x6f, 0xfe, 0xae, 0x90,
	0xdd, 0x5e, 0x21, 0x58, 0xb7, 0xc8, 0x3e, 0x45, 0x0c, 0x52, 0x9a, 0x80, 0x6d, 0x34, 0x8c, 0xd6,
	0xc1, 0x60, 0x8f, 0x22, 0xbe, 0xa0, 0x09, 0x58, 0xf7, 0xc8, 0xe1, 0x18, 0x26, 0x2c, 0x0d, 0xc6,
	0x33, 0x1e, 0xc6, 0x20, 0xa4, 0x6d, 0x36, 0x2a, 0xad, 0x83, 0xc1, 0xb5, 0x42, 0xed, 0x94, 0xa2,
	0x75, 0x87, 0xd4, 0x20, 0x8d, 0xd6, 0x50, 0xa5, 0x80, 0xaa, 0x90, 0x46, 0x9b, 0x08, 0x4b, 0x59,
	0x16, 0x4c, 0x20, 0x05, 0xc9, 0xa4, 0xfd, 0x9f, 0x42, 0x72, 0xed, 0x5c, 0x49, 0xf9, 0x32, 0x78,
	0x8b, 0x5c, 0xac, 0xa1, 0xff, 0xd5, 0x32, 0xa5, 0x6a, 0xec, 0x35, 0xa9, 0xf3, 0x05, 0x08, 0xc1,
	0x22, 0x08, 0x64, 0xc6, 0x05, 0x04, 0x31, 0x5c, 0x48, 0x7b, 0xb7, 0x51, 0x69, 0x55, 0xcf, 0x1e,
	0xba, 0x5b, 0x62, 0x71, 0x87, 0x39, 0xfe, 0x1c, 0x2e, 0xba, 0x3c, 0x7d, 0xc3, 0x26, 0x83, 0x9b,
	0x7a, 0x8e, 0xd6, 0xa5, 0xf5, 0x80, 0xdc, 0xe0, 0x22, 0x02, 0x11, 0x24, 0x6c, 0x22, 0x68, 0xc6,
	0x78, 0x2a, 0xed, 0xbd, 0xe2, 0x2d, 0xae, 0x17, 0x7a, 0xef, 0xaf, 0x6c, 0x35, 0x49, 0x0d, 0x05,
	0x84, 0x3c, 0x49, 0x58, 0x96, 0x7f, 0xf4, 0x7e, 0x81, 0x5d, 0xd1, 0xac, 0x33, 0x72, 0x84, 0x02,
	0x90, 0x0a, 0x08, 0xc2, 0x29, 0x84, 0x71, 0x20, 0x33, 0x5a, 0xc0, 0x07, 0x05, 0x5c, 0x2f, 0xcd,
	0x6e, 0xee, 0x0d, 0x95, 0x95, 0x27, 0x85, 0x02, 0xd6, 0x61, 0x12, 0x95, 0x14, 0x0a, 0xd0, 0x61,
	0xfa, 0xdd, 0xcf, 0x5f, 0x3e, 0xfc, 0x30, 0x9e, 0x91, 0xbb, 0x13, 0x96, 0x4d, 0xe7, 0x63, 0x37,
	0xe4, 0x89, 0x57, 0x9e, 0xb8, 0xfa, 0x79, 0x24, 0xa3, 0x58, 0xf7, 0xc7, 0x3a, 0x22, 0xf5, 0x8d,
	0x50, 0x74, 0x18, 0xcd, 0x21, 0x39, 0xbc, 0x9a, 0x87, 0x75, 0x42, 0xaa, 0xaa, 0x23, 0x9b, 0x5d,
	0x20, 0x4a, 0x2a, 0xea, 0xd0, 0x20, 0xb5, 0x78, 0xb1, 0x0e, 0xdd, 0x36, 0x15, 0x11, 0x2f, 0xf4,
	0xa0, 0xce, 0x7b, 0xf3, 0xeb, 0xd2, 0x31, 0x2e, 0x97, 0x8e, 0xf1, 0x73, 0xe9, 0x18, 0xef, 0x56,
	0xce, 0xce, 0xe5, 0xca, 0xd9, 0xf9, 0xbe, 0x72, 0x76, 0xc8, 0x49, 0xc8, 0x93, 0x6d, 0xa7, 0xd3,
	0xa9, 0xaa, 0x3e, 0xf6, 0xf3, 0x7e, 0xf6, 0x8d, 0x57, 0x4f, 0x15, 0x2b, 0xa3, 0xd8, 0x65, 0xdc,
	0xa3, 0xc8, 0xbc, 0x2d, 0x77, 0xe3, 0x49, 0x29, 0xe8, 0xff, 0x1f, 0xcd, 0x4a, 0xb7, 0x3d, 0xf8,
	0x64, 0x1e, 0x77, 0xd5, 0xc2, 0x36, 0xa2, 0x3b, 0x28, 0x17, 0xbe, 0x2c, 0x99, 0x6f, 0xda, 0x1d,
	0xb5, 0x11, 0x47, 0xa5, 0x3b, 0xd2, 0xee, 0xd2, 0xbc, 0xbf, 0xc5, 0x1d, 0x9d, 0xf7, 0x3b, 0x3d,
	0xc8, 0x68, 0x44, 0x33, 0xfa, 0xcb, 0x74, 0x14, 0xe9, 0xfb, 0x6d, 0x44, 0xdf, 0x2f, 0x59, 0xdf,
	0xd7, 0xf0, 0x78, 0xb7, 0xb8, 0x73, 0x8f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x7e, 0xc6,
	0x8e, 0xde, 0x03, 0x00, 0x00,
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreBlockers) > 0 {
		for iNdEx := len(m.PreBlockers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreBlockers[iNdEx])
			copy(dAtA[i:], m.PreBlockers[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.PreBlockers[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PrepareCheckStaters) > 0 {
		for iNdEx := len(m.PrepareCheckStaters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrepareCheckStaters[iNdEx])
			copy(dAtA[i:], m.PrepareCheckStaters[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.PrepareCheckStaters[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Precommiters) > 0 {
		for iNdEx := len(m.Precommiters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Precommiters[iNdEx])
			copy(dAtA[i:], m.Precommiters[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.Precommiters[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.OrderMigrations) > 0 {
		for iNdEx := len(m.OrderMigrations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderMigrations[iNdEx])
			copy(dAtA[i:], m.OrderMigrations[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.OrderMigrations[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.OverrideStoreKeys) > 0 {
		for iNdEx := len(m.OverrideStoreKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OverrideStoreKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ExportGenesis) > 0 {
		for iNdEx := len(m.ExportGenesis) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExportGenesis[iNdEx])
			copy(dAtA[i:], m.ExportGenesis[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.ExportGenesis[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InitGenesis) > 0 {
		for iNdEx := len(m.InitGenesis) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitGenesis[iNdEx])
			copy(dAtA[i:], m.InitGenesis[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.InitGenesis[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EndBlockers) > 0 {
		for iNdEx := len(m.EndBlockers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EndBlockers[iNdEx])
			copy(dAtA[i:], m.EndBlockers[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.EndBlockers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BeginBlockers) > 0 {
		for iNdEx := len(m.BeginBlockers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BeginBlockers[iNdEx])
			copy(dAtA[i:], m.BeginBlockers[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.BeginBlockers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintModule(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StoreKeyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreKeyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreKeyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KvStoreKey) > 0 {
		i -= len(m.KvStoreKey)
		copy(dAtA[i:], m.KvStoreKey)
		i = encodeVarintModule(dAtA, i, uint64(len(m.KvStoreKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintModule(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModule(dAtA []byte, offset int, v uint64) int {
	offset -= sovModule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Module) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	if len(m.BeginBlockers) > 0 {
		for _, s := range m.BeginBlockers {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.EndBlockers) > 0 {
		for _, s := range m.EndBlockers {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.InitGenesis) > 0 {
		for _, s := range m.InitGenesis {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.ExportGenesis) > 0 {
		for _, s := range m.ExportGenesis {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.OverrideStoreKeys) > 0 {
		for _, e := range m.OverrideStoreKeys {
			l = e.Size()
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.OrderMigrations) > 0 {
		for _, s := range m.OrderMigrations {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.Precommiters) > 0 {
		for _, s := range m.Precommiters {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.PrepareCheckStaters) > 0 {
		for _, s := range m.PrepareCheckStaters {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.PreBlockers) > 0 {
		for _, s := range m.PreBlockers {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	return n
}

func (m *StoreKeyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	l = len(m.KvStoreKey)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	return n
}

func sovModule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModule(x uint64) (n int) {
	return sovModule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginBlockers = append(m.BeginBlockers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndBlockers = append(m.EndBlockers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitGenesis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitGenesis = append(m.InitGenesis, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportGenesis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportGenesis = append(m.ExportGenesis, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideStoreKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OverrideStoreKeys = append(m.OverrideStoreKeys, &StoreKeyConfig{})
			if err := m.OverrideStoreKeys[len(m.OverrideStoreKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderMigrations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderMigrations = append(m.OrderMigrations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precommiters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Precommiters = append(m.Precommiters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareCheckStaters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrepareCheckStaters = append(m.PrepareCheckStaters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreBlockers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreBlockers = append(m.PreBlockers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreKeyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreKeyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreKeyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvStoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KvStoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModule = fmt.Errorf("proto: unexpected end of group")
)
